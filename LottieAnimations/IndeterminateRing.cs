//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.UI.Xaml.Controls;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace ProgressUIPrototype
{
    sealed class IndeterminateRing : IAnimatedVisualSource
    {
        public IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            if (!IsRuntimeCompatible())
            {
                return null;
            }
            return new AnimatedVisual(compositor);
        }

        static bool IsRuntimeCompatible()
        {
            if (!Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.UI.Composition.CompositionGeometricClip"))
            {
                return false;
            }
            return true;
        }

        sealed class AnimatedVisual : IAnimatedVisual
        {
            const long c_durationTicks = 20000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CubicBezierEasingFunction _cubicBezierEasingFunction;
            StepEasingFunction _holdThenStepEasingFunction;
            ContainerVisual _root;
            ExpressionAnimation _scalarExpressionAnimation;

            // Layer (Shape): Radial
            // Transforms: Radial
            // Ellipse Path
            CompositionColorBrush AnimatedColorBrush_AlmostDodgerBlue_FF0078D7_to_TransparentAlmostDodgerBlue_000078D7()
            {
                var result = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x78, 0xD7));
                result.StartAnimation("Color", ColorAnimation_AlmostDodgerBlue_FF0078D7_to_TransparentAlmostDodgerBlue_000078D7());
                var controller = result.TryGetAnimationController("Color");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Layer (Shape): Radial
            // Transforms: Radial
            // Ellipse Path
            CompositionColorBrush AnimatedColorBrush_TransparentAlmostDodgerBlue_000078D7_to_AlmostDodgerBlue_FF0078D7()
            {
                var result = _c.CreateColorBrush(Color.FromArgb(0x00, 0x00, 0x78, 0xD7));
                result.StartAnimation("Color", ColorAnimation_TransparentAlmostDodgerBlue_000078D7_to_AlmostDodgerBlue_FF0078D7());
                var controller = result.TryGetAnimationController("Color");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Color
            ColorKeyFrameAnimation ColorAnimation_AlmostDodgerBlue_FF0078D7_to_TransparentAlmostDodgerBlue_000078D7()
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                //result.InteroplationColorSpace = CompositionColorSpace.Rgb;
                // AlmostDodgerBlue_FF0078D7
                result.InsertKeyFrame(0, Color.FromArgb(0xFF, 0x00, 0x78, 0xD7), _holdThenStepEasingFunction);
                // TransparentAlmostDodgerBlue_000078D7
                result.InsertKeyFrame(0.5F, Color.FromArgb(0x00, 0x00, 0x78, 0xD7), _holdThenStepEasingFunction);
                return result;
            }

            // Color
            ColorKeyFrameAnimation ColorAnimation_TransparentAlmostDodgerBlue_000078D7_to_AlmostDodgerBlue_FF0078D7()
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                //result.InteroplationColorSpace = CompositionColorSpace.Rgb;
                // TransparentAlmostDodgerBlue_000078D7
                result.InsertKeyFrame(0, Color.FromArgb(0x00, 0x00, 0x78, 0xD7), _holdThenStepEasingFunction);
                // AlmostDodgerBlue_FF0078D7
                result.InsertKeyFrame(0.5F, Color.FromArgb(0xFF, 0x00, 0x78, 0xD7), _holdThenStepEasingFunction);
                return result;
            }

            // Ellipse Path
            CompositionColorBrush ColorBrush_LightGray()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xD3, 0xD3, 0xD3));
            }

            // Layer (Shape): Radial
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.TransformMatrix = new Matrix3x2(5, 0, 0, 5, 40, 40);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_1());
                return result;
            }

            // Layer (Shape): Radial
            // Transforms for Radial
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_1());
                shapes.Add(SpriteShape_2());
                result.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_900());
                var controller = result.TryGetAnimationController("RotationAngleInDegrees");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction()
            {
                return _cubicBezierEasingFunction = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            // Ellipse Path
            // Ellipse Path.EllipseGeometry
            CompositionEllipseGeometry Ellipse_7_0()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(7, 7);
                return result;
            }

            // Layer (Shape): Radial
            // Transforms: Radial
            // Ellipse Path
            // Ellipse Path.EllipseGeometry
            CompositionEllipseGeometry Ellipse_7_1()
            {
                var result = _c.CreateEllipseGeometry();
                result.TrimEnd = 0.5F;
                result.Radius = new Vector2(7, 7);
                result.StartAnimation("TrimStart", TrimStartScalarAnimation_0_to_0p5());
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", ScalarExpressionAnimation());
                return result;
            }

            // Layer (Shape): Radial
            // Transforms: Radial
            // Ellipse Path
            // Ellipse Path.EllipseGeometry
            CompositionEllipseGeometry Ellipse_7_2()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(7, 7);
                result.StartAnimation("TrimEnd", TrimEndScalarAnimation_0_to_0p5());
                var controller = result.TryGetAnimationController("TrimEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame  = true;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0);
                var children = result.Children;
                children.InsertAtTop(ShapeVisual());
                return result;
            }

            // Layer (Shape): Radial
            // Transforms: Radial
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_900()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.5F, 450, _cubicBezierEasingFunction);
                result.InsertKeyFrame(1, 900, _cubicBezierEasingFunction);
                return result;
            }

            ExpressionAnimation ScalarExpressionAnimation()
            {
                var result = _scalarExpressionAnimation = _c.CreateExpressionAnimation();
                result.SetReferenceParameter("_", _root);
                result.Expression = "_.Progress";
                return result;
            }

            ShapeVisual ShapeVisual()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(80, 80);
                var shapes = result.Shapes;
                // Ellipse Path
                shapes.Add(SpriteShape_0());
                // Layer (Shape): Radial
                shapes.Add(ContainerShape_0());
                return result;
            }

            // Ellipse Path
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(5, 0, 0, 5, 40, 40);
                result.Geometry = Ellipse_7_0();
                result.StrokeBrush = ColorBrush_LightGray();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 2;
                return result;
            }

            // Layer (Shape): Radial
            // Transforms: Radial
            // Ellipse Path
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape();
                result.Geometry = Ellipse_7_1();
                result.StrokeBrush = AnimatedColorBrush_TransparentAlmostDodgerBlue_000078D7_to_AlmostDodgerBlue_FF0078D7();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 2;
                return result;
            }

            // Layer (Shape): Radial
            // Transforms: Radial
            // Ellipse Path
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape();
                result.Geometry = Ellipse_7_2();
                result.StrokeBrush = AnimatedColorBrush_AlmostDodgerBlue_FF0078D7_to_TransparentAlmostDodgerBlue_000078D7();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 2;
                return result;
            }

            // Layer (Shape): Radial
            // Transforms: Radial
            // Ellipse Path
            // Ellipse Path.EllipseGeometry
            // TrimStart
            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame  = true;
                return result;
            }

            // Layer (Shape): Radial
            // Transforms: Radial
            // Ellipse Path
            // Ellipse Path.EllipseGeometry
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_0p5()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 9.99999975E-05F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.5F, 0.5F, _cubicBezierEasingFunction);
                return result;
            }

            // Layer (Shape): Radial
            // Transforms: Radial
            // Ellipse Path
            // Ellipse Path.EllipseGeometry
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_0p5()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.5F, 0, HoldThenStepEasingFunction());
                result.InsertKeyFrame(1, 0.5F, CubicBezierEasingFunction());
                return result;
            }

            internal AnimatedVisual(Compositor compositor)
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            Visual IAnimatedVisual.RootVisual => _root;
            TimeSpan IAnimatedVisual.Duration => TimeSpan.FromTicks(c_durationTicks);
            Vector2 IAnimatedVisual.Size => new Vector2(80, 80);
            void IDisposable.Dispose() => _root?.Dispose();
        }
    }
}
