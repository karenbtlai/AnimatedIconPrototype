//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           6.1.0-build.109+gebc2a6a0a3
//       
//       Command:
//           LottieGen -MinimumUapVersion 11 -Namespace WindowsInternal.ComposableShell.Experiences -Interface ILottieVisual -Language CSharp -InputFile QA_Volume.json
//       
//       Input file:
//           QA_Volume.json (9038 bytes created 10:10-07:00 Mar 30 2020)
//       
//       Invoked on:
//           SIM10FRESH @ 17:59-07:00 Apr 1 2020
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   123 |
// |--------------------------+-------|
// | Animators                |    35 |
// | Animated brushes         |     3 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     4 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     5 |
// | CompositionSpriteShapes  |     6 |
// |--------------------------+-------|
// | Brushes                  |     3 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace WindowsInternal.ComposableShell.Experiences
{
    // Name:        QA_Volume
    // Frame rate:  60 fps
    // Frame count: 180
    // Duration:    3000.0 mS
    // ____________________________________________
    // | Theme property | Type  |  Default value  |
    // |________________|_______|_________________|
    // | Foreground     | Color | #FF000000 Black |
    // --------------------------------------------
    sealed class QA_Volume : ILottieVisualSource
    {
        // Animation duration: 3.000 seconds.
        internal const long c_durationTicks = 30000000;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0x00, 0x00, 0x00);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        public CompositionPropertySet GetThemeProperties(Compositor compositor)
        {
            return EnsureThemeProperties(compositor);
        }

        internal static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties is null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public ILottieVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (AnimatedVisual.IsRuntimeCompatible())
            {
                return
                    new AnimatedVisual(
                        compositor,
                        _themeProperties
                        );
            }

            return null;
        }

        sealed class AnimatedVisual : ILottieVisual
        {
            const long c_durationTicks = 30000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Foreground_0;
            CompositionColorBrush _themeColor_Foreground_1;
            CompositionColorBrush _themeColor_Foreground_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _offsetVector2Animation_0;
            Vector2KeyFrameAnimation _scaleVector2Animation_0;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            void BindProperty2(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName0,
                CompositionObject referencedObject0,
                string referenceParameterName1,
                CompositionObject referencedObject1)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName0, referencedObject0);
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName1, referencedObject1);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Layer: MuteX
            // - - Transforms: MuteX
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-48.5F, -3.375F));
                    builder.AddLine(new Vector2(-45.25F, 1.75F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Layer: MuteX
            // - - Transforms: MuteX
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-48.5F, -3.375F));
                    builder.AddLine(new Vector2(-46.8610001F, -0.790000021F));
                    builder.AddLine(new Vector2(-45.25F, 1.75F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: SoundFirst
            // - - ShapeGroup: Volume icon
            // - Path 3.PathGeometry
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(8.82800007F, 4.2420001F));
                    builder.AddCubicBezier(new Vector2(9.20300007F, 4.6170001F), new Vector2(9.49199963F, 5.04899979F), new Vector2(9.69499969F, 5.53900003F));
                    builder.AddCubicBezier(new Vector2(9.89799976F, 6.02899981F), new Vector2(10F, 6.53900003F), new Vector2(10F, 7.07000017F));
                    builder.AddCubicBezier(new Vector2(10F, 7.60099983F), new Vector2(9.89799976F, 8.11200047F), new Vector2(9.69499969F, 8.60200024F));
                    builder.AddCubicBezier(new Vector2(9.49199963F, 9.09200001F), new Vector2(9.20300007F, 9.52299976F), new Vector2(8.82800007F, 9.89799976F));
                    builder.AddLine(new Vector2(8.125F, 9.19499969F));
                    builder.AddCubicBezier(new Vector2(8.40600014F, 8.91399956F), new Vector2(8.62199974F, 8.59200001F), new Vector2(8.77299976F, 8.22700024F));
                    builder.AddCubicBezier(new Vector2(8.92399979F, 7.85699987F), new Vector2(9F, 7.47100019F), new Vector2(9F, 7.07000017F));
                    builder.AddCubicBezier(new Vector2(9F, 6.66900015F), new Vector2(8.92399979F, 6.28700018F), new Vector2(8.77299976F, 5.92199993F));
                    builder.AddCubicBezier(new Vector2(8.62199974F, 5.55200005F), new Vector2(8.40600014F, 5.22599983F), new Vector2(8.125F, 4.94500017F));
                    builder.AddLine(new Vector2(8.82800007F, 4.2420001F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: SoundSecond
            // - - ShapeGroup: Volume icon
            // - Path 2.PathGeometry
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(10.9530001F, 2.1170001F));
                    builder.AddCubicBezier(new Vector2(11.2810001F, 2.44499993F), new Vector2(11.5699997F, 2.80299997F), new Vector2(11.8199997F, 3.18799996F));
                    builder.AddCubicBezier(new Vector2(12.0749998F, 3.56800008F), new Vector2(12.2889996F, 3.9690001F), new Vector2(12.4610004F, 4.39099979F));
                    builder.AddCubicBezier(new Vector2(12.6379995F, 4.8130002F), new Vector2(12.7700005F, 5.25F), new Vector2(12.8590002F, 5.70300007F));
                    builder.AddCubicBezier(new Vector2(12.9530001F, 6.15600014F), new Vector2(13F, 6.61199999F), new Vector2(13F, 7.07000017F));
                    builder.AddCubicBezier(new Vector2(13F, 7.53399992F), new Vector2(12.9530001F, 7.9920001F), new Vector2(12.8590002F, 8.44499969F));
                    builder.AddCubicBezier(new Vector2(12.7700005F, 8.89299965F), new Vector2(12.6379995F, 9.32800007F), new Vector2(12.4610004F, 9.75F));
                    builder.AddCubicBezier(new Vector2(12.2889996F, 10.1719999F), new Vector2(12.0749998F, 10.5760002F), new Vector2(11.8199997F, 10.9610004F));
                    builder.AddCubicBezier(new Vector2(11.5699997F, 11.3409996F), new Vector2(11.2810001F, 11.6949997F), new Vector2(10.9530001F, 12.0229998F));
                    builder.AddLine(new Vector2(10.2419996F, 11.3120003F));
                    builder.AddCubicBezier(new Vector2(10.8039999F, 10.75F), new Vector2(11.2370005F, 10.1009998F), new Vector2(11.5389996F, 9.36699963F));
                    builder.AddCubicBezier(new Vector2(11.8459997F, 8.63300037F), new Vector2(12F, 7.8670001F), new Vector2(12F, 7.07000017F));
                    builder.AddCubicBezier(new Vector2(12F, 6.27299976F), new Vector2(11.8459997F, 5.50699997F), new Vector2(11.5389996F, 4.77299976F));
                    builder.AddCubicBezier(new Vector2(11.2370005F, 4.03900003F), new Vector2(10.8039999F, 3.3900001F), new Vector2(10.2419996F, 2.82800007F));
                    builder.AddLine(new Vector2(10.9530001F, 2.1170001F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: SoundThird
            // - - ShapeGroup: Volume icon
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(13.0699997F, 0F));
                    builder.AddCubicBezier(new Vector2(13.5389996F, 0.469000012F), new Vector2(13.9530001F, 0.976000011F), new Vector2(14.3120003F, 1.523F));
                    builder.AddCubicBezier(new Vector2(14.677F, 2.06999993F), new Vector2(14.9840002F, 2.64599991F), new Vector2(15.2340002F, 3.25F));
                    builder.AddCubicBezier(new Vector2(15.4840002F, 3.84899998F), new Vector2(15.6719999F, 4.47100019F), new Vector2(15.7969999F, 5.1170001F));
                    builder.AddCubicBezier(new Vector2(15.927F, 5.7579999F), new Vector2(15.9919996F, 6.40899992F), new Vector2(15.9919996F, 7.07000017F));
                    builder.AddCubicBezier(new Vector2(15.9919996F, 7.73099995F), new Vector2(15.927F, 8.38500023F), new Vector2(15.7969999F, 9.03100014F));
                    builder.AddCubicBezier(new Vector2(15.6719999F, 9.67199993F), new Vector2(15.4840002F, 10.2939997F), new Vector2(15.2340002F, 10.8979998F));
                    builder.AddCubicBezier(new Vector2(14.9840002F, 11.4969997F), new Vector2(14.677F, 12.0699997F), new Vector2(14.3120003F, 12.6169996F));
                    builder.AddCubicBezier(new Vector2(13.9530001F, 13.1639996F), new Vector2(13.5389996F, 13.6719999F), new Vector2(13.0699997F, 14.1409998F));
                    builder.AddLine(new Vector2(12.3669996F, 13.4379997F));
                    builder.AddCubicBezier(new Vector2(12.7889996F, 13.0159998F), new Vector2(13.1610003F, 12.5600004F), new Vector2(13.4840002F, 12.0699997F));
                    builder.AddCubicBezier(new Vector2(13.8120003F, 11.5749998F), new Vector2(14.0880003F, 11.0579996F), new Vector2(14.3120003F, 10.5159998F));
                    builder.AddCubicBezier(new Vector2(14.5360003F, 9.97399998F), new Vector2(14.7049999F, 9.41399956F), new Vector2(14.8199997F, 8.83600044F));
                    builder.AddCubicBezier(new Vector2(14.9399996F, 8.25300026F), new Vector2(15F, 7.66400003F), new Vector2(15F, 7.07000017F));
                    builder.AddCubicBezier(new Vector2(15F, 6.47599983F), new Vector2(14.9399996F, 5.88999987F), new Vector2(14.8199997F, 5.3119998F));
                    builder.AddCubicBezier(new Vector2(14.7049999F, 4.72900009F), new Vector2(14.5360003F, 4.16699982F), new Vector2(14.3120003F, 3.625F));
                    builder.AddCubicBezier(new Vector2(14.0880003F, 3.08299994F), new Vector2(13.8120003F, 2.56800008F), new Vector2(13.4840002F, 2.07800007F));
                    builder.AddCubicBezier(new Vector2(13.1610003F, 1.58299994F), new Vector2(12.7889996F, 1.125F), new Vector2(12.3669996F, 0.703000009F));
                    builder.AddLine(new Vector2(13.0699997F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - -  Scale:1.25, Offset:<0.82800007, 2.862>
            // - Path 5+Path 4.PathGeometry
            CanvasGeometry Geometry_5()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_6(), Geometry_7() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - Layer aggregator
            // - - -  Scale:1.25, Offset:<0.82800007, 2.862>
            // - - Path 5+Path 4.PathGeometry
            // Path 5
            CanvasGeometry Geometry_6()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(5F, 2.7809999F));
                    builder.AddLine(new Vector2(2.71099997F, 5.07000017F));
                    builder.AddLine(new Vector2(1F, 5.07000017F));
                    builder.AddLine(new Vector2(1F, 9.06999969F));
                    builder.AddLine(new Vector2(2.71099997F, 9.06999969F));
                    builder.AddLine(new Vector2(5F, 11.3590002F));
                    builder.AddLine(new Vector2(5F, 2.7809999F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - -  Scale:1.25, Offset:<0.82800007, 2.862>
            // - - Path 5+Path 4.PathGeometry
            // Path 4
            CanvasGeometry Geometry_7()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(5.28900003F, 1.07000005F));
                    builder.AddLine(new Vector2(6F, 1.07000005F));
                    builder.AddLine(new Vector2(6F, 13.0699997F));
                    builder.AddLine(new Vector2(5.28900003F, 13.0699997F));
                    builder.AddLine(new Vector2(2.28900003F, 10.0699997F));
                    builder.AddLine(new Vector2(0F, 10.0699997F));
                    builder.AddLine(new Vector2(0F, 4.07000017F));
                    builder.AddLine(new Vector2(2.28900003F, 4.07000017F));
                    builder.AddLine(new Vector2(5.28900003F, 1.07000005F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground_0()
            {
                var result = _themeColor_Foreground_0 = _c.CreateColorBrush();
                BindProperty(result, "Color", "ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // - - Layer aggregator
            // - Layer: SoundSecond
            // ShapeGroup: Volume icon
            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground_1()
            {
                var result = _themeColor_Foreground_1 = _c.CreateColorBrush();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Opacity0", 0F);
                BindProperty2(result, "Color", "ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties, "my", propertySet);
                StartProgressBoundAnimation(propertySet, "Opacity0", Opacity0ScalarAnimation_0_to_1_0(), _rootProgress);
                return result;
            }

            // - - Layer aggregator
            // - Layer: SoundThird
            // ShapeGroup: Volume icon
            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground_2()
            {
                var result = _themeColor_Foreground_2 = _c.CreateColorBrush();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Opacity0", 0F);
                BindProperty2(result, "Color", "ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties, "my", propertySet);
                StartProgressBoundAnimation(propertySet, "Opacity0", Opacity0ScalarAnimation_0_to_1_1(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Layer: MuteX
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.Shapes.Add(ContainerShape_1());
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_0(), _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Layer: MuteX
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(9.06200027F, 7.07000017F);
                var shapes = result.Shapes;
                // Transforms: MuteX
                shapes.Add(SpriteShape_0());
                // Transforms: MuteX
                shapes.Add(SpriteShape_1());
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_0(), _rootProgress);
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_0(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Layer: SoundFirst
            CompositionContainerShape ContainerShape_2()
            {
                var result = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                // ShapeGroup: Volume icon
                result.Shapes.Add(SpriteShape_2());
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_1(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Layer: SoundSecond
            CompositionContainerShape ContainerShape_3()
            {
                var result = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                // ShapeGroup: Volume icon
                result.Shapes.Add(SpriteShape_3());
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_2(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Layer: SoundThird
            CompositionContainerShape ContainerShape_4()
            {
                var result = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                // ShapeGroup: Volume icon
                result.Shapes.Add(SpriteShape_4());
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_3(), _rootProgress);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: MuteX
            // Transforms: MuteX
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: MuteX
            // Transforms: MuteX
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
                return result;
            }

            // - - Layer aggregator
            // - Layer: SoundFirst
            // ShapeGroup: Volume icon
            // Path 3.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
                return result;
            }

            // - - Layer aggregator
            // - Layer: SoundSecond
            // ShapeGroup: Volume icon
            // Path 2.PathGeometry
            CompositionPathGeometry PathGeometry_3()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
                return result;
            }

            // - - Layer aggregator
            // - Layer: SoundThird
            // ShapeGroup: Volume icon
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_4()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
                return result;
            }

            // - Layer aggregator
            // Scale:1.25, Offset:<0.82800007, 2.862>
            // Path 5+Path 4.PathGeometry
            CompositionPathGeometry PathGeometry_5()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_5()));
                return result;
            }

            // - - Layer aggregator
            // - Layer: MuteX
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.CenterPoint = new Vector2(-46.875F, -0.811999977F);
                result.Offset = new Vector2(56.7190018F, 8.02900028F);
                result.Scale = new Vector2(1.25F, 1.25F);
                result.StrokeBrush = ThemeColor_Foreground_0();
                result.StrokeMiterLimit = 2F;
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_m10_to_33(), RootProgress());
                return result;
            }

            // - - Layer aggregator
            // - Layer: MuteX
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.CenterPoint = new Vector2(-46.875F, -0.811999977F);
                result.Offset = new Vector2(56.7190018F, 8.02900028F);
                result.Scale = new Vector2(1.25F, 1.25F);
                result.StrokeBrush = _themeColor_Foreground_0;
                result.StrokeMiterLimit = 2F;
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_73_to_32(), _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Layer: SoundFirst
            // Path 3
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.CenterPoint = new Vector2(9.06200027F, 7.07000017F);
                result.FillBrush = _themeColor_Foreground_0;
                StartProgressBoundAnimation(result, "Scale", _scaleVector2Animation_0, _rootProgress);
                StartProgressBoundAnimation(result, "Offset", _offsetVector2Animation_0, _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Layer: SoundSecond
            // Path 2
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape(PathGeometry_3());
                result.CenterPoint = new Vector2(11.6210003F, 7.07000017F);
                result.FillBrush = ThemeColor_Foreground_1();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_1(), _rootProgress);
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_1(), _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Layer: SoundThird
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                var result = _c.CreateSpriteShape(PathGeometry_4());
                result.CenterPoint = new Vector2(14.1800003F, 7.07000017F);
                result.FillBrush = ThemeColor_Foreground_2();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_2(), _rootProgress);
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_2(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 5+Path 4
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<0.07800007, 1.0945>, Scale:<1.25, 1.25>
                var result = CreateSpriteShape(PathGeometry_5(), new Matrix3x2(1.25F, 0F, 0F, 1.25F, 0.0780000687F, 1.09449995F), _themeColor_Foreground_0);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(1F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Opacity0
            ScalarKeyFrameAnimation Opacity0ScalarAnimation_0_to_1_0()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.333333343F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.361111104F, 1F, CubicBezierEasingFunction_2());
                return result;
            }

            // Opacity0
            ScalarKeyFrameAnimation Opacity0ScalarAnimation_0_to_1_1()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.666666687F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.694444418F, 1F, _cubicBezierEasingFunction_2);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: MuteX
            // Transforms: MuteX
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_73_to_32()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 73F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.0722222254F, 32F, _cubicBezierEasingFunction_0);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: MuteX
            // Transforms: MuteX
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_m10_to_33()
            {
                var result = CreateScalarKeyFrameAnimation(0F, -10F, HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.0722222254F, 33F, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(20F, 20F);
                var shapes = result.Shapes;
                // Layer: MuteX
                shapes.Add(ContainerShape_0());
                // Layer: SoundFirst
                shapes.Add(ContainerShape_2());
                // Layer: SoundSecond
                shapes.Add(ContainerShape_3());
                // Layer: SoundThird
                shapes.Add(ContainerShape_4());
                // Scale:1.25, Offset:<0.82800007, 2.862>
                shapes.Add(SpriteShape_5());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                var result = _offsetVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(1.56299996F, 2.86199999F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.027777778F, new Vector2(1.56299996F, 2.86199999F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.138888896F, new Vector2(2.3440001F, 2.86199999F), _cubicBezierEasingFunction_1);
                return result;
            }

            // - - Layer aggregator
            // - Layer: SoundSecond
            // ShapeGroup: Volume icon
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(2.2019999F, 2.86199999F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.333333343F, new Vector2(2.2019999F, 2.86199999F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.444444448F, new Vector2(2.98399997F, 2.86199999F), _cubicBezierEasingFunction_1);
                return result;
            }

            // - - Layer aggregator
            // - Layer: SoundThird
            // ShapeGroup: Volume icon
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_2()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(2.84200001F, 2.86199999F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.666666687F, new Vector2(2.84200001F, 2.86199999F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.777777791F, new Vector2(3.62299991F, 2.86199999F), _cubicBezierEasingFunction_1);
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                var result = _scaleVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(0.625F, 0.625F), StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.027777778F, new Vector2(0.625F, 0.625F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.0833333358F, new Vector2(1.25F, 1.25F), CubicBezierEasingFunction_1());
                return result;
            }

            // - - Layer aggregator
            // - Layer: SoundSecond
            // ShapeGroup: Volume icon
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0.625F, 0.625F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.333333343F, new Vector2(0.625F, 0.625F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.388888896F, new Vector2(1.25F, 1.25F), _cubicBezierEasingFunction_1);
                return result;
            }

            // - - Layer aggregator
            // - Layer: SoundThird
            // ShapeGroup: Volume icon
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_2()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0.625F, 0.625F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.666666687F, new Vector2(0.625F, 0.625F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.722222209F, new Vector2(1.25F, 1.25F), _cubicBezierEasingFunction_1);
                return result;
            }

            // - Layer aggregator
            // Layer: MuteX
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
            {
                var result = CreateVector2KeyFrameAnimation(0.027777778F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            // - Layer aggregator
            // Layer: SoundFirst
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
            {
                var result = CreateVector2KeyFrameAnimation(0.027777778F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                return result;
            }

            // - Layer aggregator
            // Layer: SoundSecond
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
            {
                var result = CreateVector2KeyFrameAnimation(0.333333343F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                return result;
            }

            // - Layer aggregator
            // Layer: SoundThird
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_3()
            {
                var result = CreateVector2KeyFrameAnimation(0.666666687F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                return result;
            }

            internal AnimatedVisual(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(20F, 20F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
