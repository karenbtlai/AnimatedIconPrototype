//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           6.1.0-build.78+g20c58b7023
//       
//       Command:
//           LottieGen -Interface ILottieVisualSource -Language CSharp -InputFile LOCKSCREEN_FingerHello.json
//       
//       Input file:
//           LOCKSCREEN_FingerHello.json (30594 bytes created 23:18-07:00 Jun 28 2020)
//       
//       Invoked on:
//           KAREN @ 23:28-07:00 Jun 28 2020
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   254 |
// |--------------------------+-------|
// | Animators                |    97 |
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |    18 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     2 |
// | ShapeVisuals             |     2 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |    19 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedIconPrototype
{
    // Name:        LockScreen_FingerHelloAnim
    // Frame rate:  60 fps
    // Frame count: 300
    // Duration:    5000.0 mS
    // _____________________________________________________
    // | Marker | Constant | Frame |   mS   |   Progress   |
    // |________|__________|_______|________|______________|
    // | 1      | M_1      |   0.0 |    0.0 | 0F           |
    // | 2      | M_2      |  60.0 | 1000.0 | 0.200000003F |
    // | 3      | M_3      | 120.0 | 2000.0 | 0.400000006F |
    // | 4      | M_4      | 180.0 | 3000.0 | 0.600000024F |
    // | 5      | M_5      | 239.0 | 3983.3 | 0.796666682F |
    // -----------------------------------------------------
    sealed class FingerHello : ILottieVisualSource
    {
        // Animation duration: 5.000 seconds.
        internal const long c_durationTicks = 50000000;

        // Marker: 1.
        internal const float M_1 = 0F;

        // Marker: 2.
        internal const float M_2 = 0.200000003F;

        // Marker: 3.
        internal const float M_3 = 0.400000006F;

        // Marker: 4.
        internal const float M_4 = 0.600000024F;

        // Marker: 5.
        internal const float M_5 = 0.796666682F;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0x00, 0x00, 0x00);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        public CompositionPropertySet GetThemeProperties(Compositor compositor)
        {
            return EnsureThemeProperties(compositor);
        }

        internal static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties is null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public ILottieVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (AnimatedVisual.IsRuntimeCompatible())
            {
                return
                    new AnimatedVisual(
                        compositor
                        );
            }

            return null;
        }

        sealed class AnimatedVisual : ILottieVisual
        {
            const long c_durationTicks = 50000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_Black;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            CompositionPath _path_3;
            CompositionPath _path_4;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            ExpressionAnimation _rootProgress;
            ScalarKeyFrameAnimation _strokeThicknessScalarAnimation_25_to_80;
            ScalarKeyFrameAnimation _tEndScalarAnimation_0_to_1_0;
            ScalarKeyFrameAnimation _tEndScalarAnimation_0_to_1_1;
            ScalarKeyFrameAnimation _trimEndScalarAnimation_0_to_0;
            ScalarKeyFrameAnimation _tStartScalarAnimation_0_to_1_0;
            ScalarKeyFrameAnimation _tStartScalarAnimation_0_to_1_1;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _shapeVisibilityAnimation_0;
            Vector2KeyFrameAnimation _shapeVisibilityAnimation_1;
            Vector2KeyFrameAnimation _shapeVisibilityAnimation_2;
            Vector2KeyFrameAnimation _shapeVisibilityAnimation_5;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // PreComp layer: FingerPrint - Base
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation()
            {
                var result = CreateBooleanKeyFrameAnimation(0.600000024F, false);
                return result;
            }

            // - - - - PreComp layer: FingerPrint - Base
            // - - - Opacity for layer: FingerPrint - Base
            // - - Layer: Layer 2
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_00()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(60.7939987F, -48.6349983F));
                    builder.AddCubicBezier(new Vector2(60.7939987F, -33.5629997F), new Vector2(57.9440002F, -19.3780003F), new Vector2(52.2449989F, -6.079F));
                    builder.AddCubicBezier(new Vector2(46.5460014F, 7.21999979F), new Vector2(38.6930008F, 18.8080006F), new Vector2(28.6870003F, 28.6870003F));
                    builder.AddCubicBezier(new Vector2(18.6809998F, 38.5660019F), new Vector2(7.09299994F, 46.355999F), new Vector2(-6.079F, 52.0550003F));
                    builder.AddCubicBezier(new Vector2(-19.2509995F, 57.7540016F), new Vector2(-33.4360008F, 60.6669998F), new Vector2(-48.6349983F, 60.7939987F));
                    builder.AddCubicBezier(new Vector2(-51.9280014F, 60.7939987F), new Vector2(-54.7779999F, 59.5900002F), new Vector2(-57.1839981F, 57.1839981F));
                    builder.AddCubicBezier(new Vector2(-59.5900002F, 54.7779999F), new Vector2(-60.7939987F, 51.9280014F), new Vector2(-60.7939987F, 48.6349983F));
                    builder.AddCubicBezier(new Vector2(-60.7939987F, 45.3419991F), new Vector2(-59.5900002F, 42.4920006F), new Vector2(-57.1839981F, 40.0859985F));
                    builder.AddCubicBezier(new Vector2(-54.7779999F, 37.6800003F), new Vector2(-51.9280014F, 36.4760017F), new Vector2(-48.6349983F, 36.4760017F));
                    builder.AddCubicBezier(new Vector2(-36.855999F, 36.4760017F), new Vector2(-25.8369999F, 34.2599983F), new Vector2(-15.5780001F, 29.8269997F));
                    builder.AddCubicBezier(new Vector2(-5.31899977F, 25.3939991F), new Vector2(3.6730001F, 19.3150005F), new Vector2(11.3990002F, 11.5889997F));
                    builder.AddCubicBezier(new Vector2(19.125F, 3.86299992F), new Vector2(25.2040005F, -5.12900019F), new Vector2(29.6369991F, -15.3879995F));
                    builder.AddCubicBezier(new Vector2(34.0699997F, -25.6469994F), new Vector2(36.348999F, -36.7299995F), new Vector2(36.4760017F, -48.6349983F));
                    builder.AddCubicBezier(new Vector2(36.4760017F, -51.9280014F), new Vector2(37.6800003F, -54.7779999F), new Vector2(40.0859985F, -57.1839981F));
                    builder.AddCubicBezier(new Vector2(42.4920006F, -59.5900002F), new Vector2(45.3419991F, -60.7939987F), new Vector2(48.6349983F, -60.7939987F));
                    builder.AddCubicBezier(new Vector2(51.9280014F, -60.7939987F), new Vector2(54.7779999F, -59.5900002F), new Vector2(57.1839981F, -57.1839981F));
                    builder.AddCubicBezier(new Vector2(59.5900002F, -54.7779999F), new Vector2(60.7939987F, -51.9280014F), new Vector2(60.7939987F, -48.6349983F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - PreComp layer: FingerPrint - Base
            // - - - Opacity for layer: FingerPrint - Base
            // - - Layer: Layer 2
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_01()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 0F));
                    builder.AddCubicBezier(new Vector2(-16.5919991F, 0F), new Vector2(-32.2960014F, 1.96300006F), new Vector2(-47.1150017F, 5.88899994F));
                    builder.AddCubicBezier(new Vector2(-61.9339981F, 9.81499958F), new Vector2(-76.7519989F, 15.4519997F), new Vector2(-91.5709991F, 22.7980003F));
                    builder.AddCubicBezier(new Vector2(-93.5970001F, 23.8110008F), new Vector2(-95.4970016F, 24.3180008F), new Vector2(-97.2699966F, 24.3180008F));
                    builder.AddCubicBezier(new Vector2(-100.563004F, 24.3180008F), new Vector2(-103.414001F, 23.1140003F), new Vector2(-105.82F, 20.7080002F));
                    builder.AddCubicBezier(new Vector2(-108.225998F, 18.302F), new Vector2(-109.429001F, 15.4519997F), new Vector2(-109.429001F, 12.1590004F));
                    builder.AddCubicBezier(new Vector2(-109.429001F, 7.47300005F), new Vector2(-107.276001F, 3.92600012F), new Vector2(-102.970001F, 1.51999998F));
                    builder.AddCubicBezier(new Vector2(-95.6240005F, -2.78600001F), new Vector2(-87.7080002F, -6.52299976F), new Vector2(-79.2220001F, -9.68900013F));
                    builder.AddCubicBezier(new Vector2(-70.7360001F, -12.8549995F), new Vector2(-62.0610008F, -15.5780001F), new Vector2(-53.1949997F, -17.8579998F));
                    builder.AddCubicBezier(new Vector2(-44.3289986F, -20.1380005F), new Vector2(-35.3359985F, -21.7210007F), new Vector2(-26.2169991F, -22.6079998F));
                    builder.AddCubicBezier(new Vector2(-17.0979996F, -23.4950008F), new Vector2(-8.35900021F, -24.0650005F), new Vector2(0F, -24.3180008F));
                    builder.AddCubicBezier(new Vector2(8.48600006F, -24.3180008F), new Vector2(17.2250004F, -23.8110008F), new Vector2(26.2169991F, -22.7980003F));
                    builder.AddCubicBezier(new Vector2(35.2089996F, -21.7849998F), new Vector2(44.1389999F, -20.1380005F), new Vector2(53.0050011F, -17.8579998F));
                    builder.AddCubicBezier(new Vector2(61.8709984F, -15.5780001F), new Vector2(70.5459976F, -12.9189997F), new Vector2(79.0319977F, -9.87899971F));
                    builder.AddCubicBezier(new Vector2(87.5179977F, -6.83900023F), new Vector2(95.4970016F, -3.03999996F), new Vector2(102.970001F, 1.51999998F));
                    builder.AddCubicBezier(new Vector2(107.276001F, 3.92600012F), new Vector2(109.429001F, 7.40899992F), new Vector2(109.429001F, 11.9689999F));
                    builder.AddCubicBezier(new Vector2(109.429001F, 15.3889999F), new Vector2(108.290001F, 18.302F), new Vector2(106.010002F, 20.7080002F));
                    builder.AddCubicBezier(new Vector2(103.730003F, 23.1140003F), new Vector2(100.816002F, 24.3180008F), new Vector2(97.2699966F, 24.3180008F));
                    builder.AddCubicBezier(new Vector2(96.0029984F, 24.3180008F), new Vector2(94.9909973F, 24.2549992F), new Vector2(94.2310028F, 24.1280003F));
                    builder.AddCubicBezier(new Vector2(93.4710007F, 24.0009995F), new Vector2(92.5839996F, 23.5580006F), new Vector2(91.5709991F, 22.7980003F));
                    builder.AddCubicBezier(new Vector2(77.0059967F, 15.3249998F), new Vector2(62.25F, 9.68900013F), new Vector2(47.3050003F, 5.88899994F));
                    builder.AddCubicBezier(new Vector2(32.3600006F, 2.08899999F), new Vector2(16.5919991F, 0.127000004F), new Vector2(0F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - PreComp layer: FingerPrint - Base
            // - - - Opacity for layer: FingerPrint - Base
            // - - Layer: Layer 2
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_02()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-8.83399963F, -48.6349983F));
                    builder.AddCubicBezier(new Vector2(5.35099983F, -48.6349983F), new Vector2(19.2199993F, -46.7989998F), new Vector2(32.7719994F, -43.1259995F));
                    builder.AddCubicBezier(new Vector2(46.3240013F, -39.4529991F), new Vector2(59.1790009F, -34.0060005F), new Vector2(71.3379974F, -26.7870007F));
                    builder.AddCubicBezier(new Vector2(76.7839966F, -23.4939995F), new Vector2(82.2300034F, -19.7579994F), new Vector2(87.6760025F, -15.5780001F));
                    builder.AddCubicBezier(new Vector2(93.1220016F, -11.3979998F), new Vector2(98.3789978F, -6.84000015F), new Vector2(103.445F, -1.89999998F));
                    builder.AddCubicBezier(new Vector2(108.511002F, 3.03999996F), new Vector2(113.070999F, 8.2329998F), new Vector2(117.124001F, 13.6789999F));
                    builder.AddCubicBezier(new Vector2(121.177002F, 19.125F), new Vector2(124.848999F, 24.698F), new Vector2(128.141998F, 30.3969994F));
                    builder.AddCubicBezier(new Vector2(129.154999F, 32.4230003F), new Vector2(129.662003F, 34.3860016F), new Vector2(129.662003F, 36.2859993F));
                    builder.AddCubicBezier(new Vector2(129.662003F, 39.7060013F), new Vector2(128.459F, 42.6199989F), new Vector2(126.053001F, 45.026001F));
                    builder.AddCubicBezier(new Vector2(123.647003F, 47.4319992F), new Vector2(120.795998F, 48.6349983F), new Vector2(117.502998F, 48.6349983F));
                    builder.AddCubicBezier(new Vector2(115.097F, 48.6349983F), new Vector2(113.07F, 48.1279984F), new Vector2(111.424004F, 47.1150017F));
                    builder.AddCubicBezier(new Vector2(109.778F, 46.1020012F), new Vector2(108.320999F, 44.5820007F), new Vector2(107.054001F, 42.5559998F));
                    builder.AddCubicBezier(new Vector2(104.521004F, 38.6300011F), new Vector2(101.987999F, 34.8300018F), new Vector2(99.4550018F, 31.1569996F));
                    builder.AddCubicBezier(new Vector2(96.9219971F, 27.4839993F), new Vector2(94.0719986F, 23.9379997F), new Vector2(90.9059982F, 20.5179996F));
                    builder.AddCubicBezier(new Vector2(84.572998F, 13.4250002F), new Vector2(77.6070023F, 7.09299994F), new Vector2(70.0080032F, 1.51999998F));
                    builder.AddCubicBezier(new Vector2(62.4090004F, -4.05299997F), new Vector2(54.3660011F, -8.73900032F), new Vector2(45.8800011F, -12.5389996F));
                    builder.AddCubicBezier(new Vector2(37.394001F, -16.3390007F), new Vector2(28.5289993F, -19.2520008F), new Vector2(19.2830009F, -21.2779999F));
                    builder.AddCubicBezier(new Vector2(10.0369997F, -23.3040009F), new Vector2(0.665000021F, -24.3180008F), new Vector2(-8.83399963F, -24.3180008F));
                    builder.AddCubicBezier(new Vector2(-24.1590004F, -24.3180008F), new Vector2(-38.9780006F, -21.7840004F), new Vector2(-53.2900009F, -16.7180004F));
                    builder.AddCubicBezier(new Vector2(-67.6019974F, -11.6520004F), new Vector2(-80.7099991F, -4.30700016F), new Vector2(-92.6159973F, 5.31899977F));
                    builder.AddCubicBezier(new Vector2(-95.5289993F, 7.59899998F), new Vector2(-98.2519989F, 10.0059996F), new Vector2(-100.785004F, 12.5389996F));
                    builder.AddLine(new Vector2(-108.573997F, 20.3279991F));
                    builder.AddCubicBezier(new Vector2(-109.967003F, 21.7210007F), new Vector2(-111.296997F, 22.7350006F), new Vector2(-112.564003F, 23.368F));
                    builder.AddCubicBezier(new Vector2(-113.831001F, 24.0009995F), new Vector2(-115.476997F, 24.3180008F), new Vector2(-117.502998F, 24.3180008F));
                    builder.AddCubicBezier(new Vector2(-120.922997F, 24.3180008F), new Vector2(-123.773003F, 23.1140003F), new Vector2(-126.053001F, 20.7080002F));
                    builder.AddCubicBezier(new Vector2(-128.332993F, 18.302F), new Vector2(-129.535004F, 15.4519997F), new Vector2(-129.662003F, 12.1590004F));
                    builder.AddCubicBezier(new Vector2(-129.662003F, 10.5120001F), new Vector2(-129.408997F, 9.05599976F), new Vector2(-128.901993F, 7.78900003F));
                    builder.AddCubicBezier(new Vector2(-128.395004F, 6.52199984F), new Vector2(-127.636002F, 5.25699997F), new Vector2(-126.623001F, 3.99000001F));
                    builder.AddCubicBezier(new Vector2(-123.583F, 0.064000003F), new Vector2(-119.973999F, -3.73600006F), new Vector2(-115.793999F, -7.40899992F));
                    builder.AddCubicBezier(new Vector2(-111.613998F, -11.0819998F), new Vector2(-107.245003F, -14.5649996F), new Vector2(-102.684998F, -17.8579998F));
                    builder.AddCubicBezier(new Vector2(-98.125F, -21.1509991F), new Vector2(-93.3759995F, -24.191F), new Vector2(-88.435997F, -26.9769993F));
                    builder.AddCubicBezier(new Vector2(-83.4960022F, -29.7630005F), new Vector2(-78.810997F, -32.2340012F), new Vector2(-74.3779984F, -34.387001F));
                    builder.AddCubicBezier(new Vector2(-64.1190033F, -39.2000008F), new Vector2(-53.4799995F, -42.7459984F), new Vector2(-42.4609985F, -45.026001F));
                    builder.AddCubicBezier(new Vector2(-31.4419994F, -47.3059998F), new Vector2(-20.2329998F, -48.5079994F), new Vector2(-8.83399963F, -48.6349983F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - PreComp layer: FingerPrint - Base
            // - - - Opacity for layer: FingerPrint - Base
            // - - Layer: Layer 2
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_03()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, -121.587997F));
                    builder.AddCubicBezier(new Vector2(15.0719995F, -121.587997F), new Vector2(29.257F, -118.737999F), new Vector2(42.5559998F, -113.039001F));
                    builder.AddCubicBezier(new Vector2(55.8549995F, -107.339996F), new Vector2(67.4430008F, -99.4869995F), new Vector2(77.3219986F, -89.4810028F));
                    builder.AddCubicBezier(new Vector2(87.2009964F, -79.4749985F), new Vector2(94.9909973F, -67.887001F), new Vector2(100.690002F, -54.7150002F));
                    builder.AddCubicBezier(new Vector2(106.389F, -41.5429993F), new Vector2(109.302002F, -27.3579998F), new Vector2(109.429001F, -12.1590004F));
                    builder.AddCubicBezier(new Vector2(109.429001F, -0.254000008F), new Vector2(108.480003F, 11.526F), new Vector2(106.580002F, 23.1779995F));
                    builder.AddCubicBezier(new Vector2(104.68F, 34.8300018F), new Vector2(101.639999F, 46.2919998F), new Vector2(97.4599991F, 57.5639992F));
                    builder.AddCubicBezier(new Vector2(95.814003F, 62.1240005F), new Vector2(93.7870026F, 67.1269989F), new Vector2(91.3809967F, 72.572998F));
                    builder.AddCubicBezier(new Vector2(88.9749985F, 78.0189972F), new Vector2(86.2519989F, 83.4020004F), new Vector2(83.211998F, 88.7210007F));
                    builder.AddCubicBezier(new Vector2(80.1719971F, 94.0400009F), new Vector2(77.0690002F, 99.2340012F), new Vector2(73.9029999F, 104.300003F));
                    builder.AddCubicBezier(new Vector2(70.7369995F, 109.365997F), new Vector2(67.5070038F, 113.609001F), new Vector2(64.2139969F, 117.028999F));
                    builder.AddCubicBezier(new Vector2(62.8209991F, 118.421997F), new Vector2(61.4269981F, 119.498001F), new Vector2(60.0340004F, 120.258003F));
                    builder.AddCubicBezier(new Vector2(58.6409988F, 121.017998F), new Vector2(56.868F, 121.460999F), new Vector2(54.7150002F, 121.587997F));
                    builder.AddCubicBezier(new Vector2(51.4220009F, 121.587997F), new Vector2(48.5709991F, 120.447998F), new Vector2(46.1650009F, 118.167999F));
                    builder.AddCubicBezier(new Vector2(43.7589989F, 115.888F), new Vector2(42.5559998F, 112.974998F), new Vector2(42.5559998F, 109.429001F));
                    builder.AddCubicBezier(new Vector2(42.5559998F, 106.768997F), new Vector2(43.4430008F, 104.236F), new Vector2(45.2159996F, 101.830002F));
                    builder.AddCubicBezier(new Vector2(47.6220016F, 98.5370026F), new Vector2(49.9650002F, 95.3069992F), new Vector2(52.2449989F, 92.1409988F));
                    builder.AddCubicBezier(new Vector2(54.5250015F, 88.9749985F), new Vector2(56.7410011F, 85.6179962F), new Vector2(58.894001F, 82.0719986F));
                    builder.AddCubicBezier(new Vector2(67.6330032F, 67.7600021F), new Vector2(74.1559982F, 52.6879997F), new Vector2(78.461998F, 36.855999F));
                    builder.AddCubicBezier(new Vector2(82.7679977F, 21.0240002F), new Vector2(84.9850006F, 4.68599987F), new Vector2(85.1119995F, -12.1590004F));
                    builder.AddCubicBezier(new Vector2(85.1119995F, -23.9379997F), new Vector2(82.8949966F, -34.9570007F), new Vector2(78.461998F, -45.2159996F));
                    builder.AddCubicBezier(new Vector2(74.0289993F, -55.4749985F), new Vector2(67.9499969F, -64.4670029F), new Vector2(60.223999F, -72.1930008F));
                    builder.AddCubicBezier(new Vector2(52.4980011F, -79.9189987F), new Vector2(43.5060005F, -85.9980011F), new Vector2(33.2470016F, -90.4309998F));
                    builder.AddCubicBezier(new Vector2(22.9880009F, -94.8639984F), new Vector2(11.9060001F, -97.1429977F), new Vector2(0F, -97.2699966F));
                    builder.AddCubicBezier(new Vector2(-11.7790003F, -97.2699966F), new Vector2(-22.7980003F, -95.0540009F), new Vector2(-33.0569992F, -90.6210022F));
                    builder.AddCubicBezier(new Vector2(-43.3160019F, -86.1880035F), new Vector2(-52.3079987F, -80.1090012F), new Vector2(-60.0340004F, -72.3830032F));
                    builder.AddCubicBezier(new Vector2(-67.7600021F, -64.6569977F), new Vector2(-73.8389969F, -55.6650009F), new Vector2(-78.2720032F, -45.4059982F));
                    builder.AddCubicBezier(new Vector2(-82.7050018F, -35.1469994F), new Vector2(-84.9850006F, -24.0639992F), new Vector2(-85.1119995F, -12.1590004F));
                    builder.AddCubicBezier(new Vector2(-85.1119995F, -8.86600018F), new Vector2(-86.3150024F, -6.01599979F), new Vector2(-88.7210007F, -3.6099999F));
                    builder.AddCubicBezier(new Vector2(-91.1269989F, -1.204F), new Vector2(-93.9769974F, 0F), new Vector2(-97.2699966F, 0F));
                    builder.AddCubicBezier(new Vector2(-100.563004F, 0F), new Vector2(-103.414001F, -1.204F), new Vector2(-105.82F, -3.6099999F));
                    builder.AddCubicBezier(new Vector2(-108.225998F, -6.01599979F), new Vector2(-109.429001F, -8.86600018F), new Vector2(-109.429001F, -12.1590004F));
                    builder.AddCubicBezier(new Vector2(-109.429001F, -27.2310009F), new Vector2(-106.579002F, -41.4160004F), new Vector2(-100.879997F, -54.7150002F));
                    builder.AddCubicBezier(new Vector2(-95.1809998F, -68.0139999F), new Vector2(-87.3280029F, -79.6019974F), new Vector2(-77.3219986F, -89.4810028F));
                    builder.AddCubicBezier(new Vector2(-67.3160019F, -99.3600006F), new Vector2(-55.7280006F, -107.150002F), new Vector2(-42.5559998F, -112.848999F));
                    builder.AddCubicBezier(new Vector2(-29.3840008F, -118.547997F), new Vector2(-15.1990004F, -121.460999F), new Vector2(0F, -121.587997F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - PreComp layer: FingerPrint - Base
            // - - - Opacity for layer: FingerPrint - Base
            // - - Layer: Layer 2
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_04()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(24.3180008F, -97.2699966F));
                    builder.AddCubicBezier(new Vector2(32.6769981F, -97.2699966F), new Vector2(40.5289993F, -95.6869965F), new Vector2(47.875F, -92.5210037F));
                    builder.AddCubicBezier(new Vector2(55.2210007F, -89.3550034F), new Vector2(61.6170006F, -84.9850006F), new Vector2(67.0630035F, -79.4120026F));
                    builder.AddCubicBezier(new Vector2(72.5090027F, -73.8389969F), new Vector2(76.8789978F, -67.3799973F), new Vector2(80.1719971F, -60.0340004F));
                    builder.AddCubicBezier(new Vector2(83.4649963F, -52.6879997F), new Vector2(85.1119995F, -44.8349991F), new Vector2(85.1119995F, -36.4760017F));
                    builder.AddCubicBezier(new Vector2(85.1119995F, -23.4309998F), new Vector2(83.5279999F, -10.5749998F), new Vector2(80.3619995F, 2.08999991F));
                    builder.AddCubicBezier(new Vector2(77.1959991F, 14.7550001F), new Vector2(72.5090027F, 26.7870007F), new Vector2(66.3030014F, 38.1860008F));
                    builder.AddCubicBezier(new Vector2(60.0970001F, 49.5849991F), new Vector2(52.6889992F, 60.1609993F), new Vector2(44.0760002F, 69.913002F));
                    builder.AddCubicBezier(new Vector2(35.4640007F, 79.6650009F), new Vector2(25.5849991F, 88.0879974F), new Vector2(14.4390001F, 95.1809998F));
                    builder.AddCubicBezier(new Vector2(13.4259996F, 95.814003F), new Vector2(12.4119997F, 96.3209991F), new Vector2(11.3990002F, 96.7009964F));
                    builder.AddCubicBezier(new Vector2(10.3859997F, 97.0810013F), new Vector2(9.18200016F, 97.2699966F), new Vector2(7.78900003F, 97.2699966F));
                    builder.AddCubicBezier(new Vector2(4.36899996F, 97.2699966F), new Vector2(1.51999998F, 96.0670013F), new Vector2(-0.75999999F, 93.6610031F));
                    builder.AddCubicBezier(new Vector2(-3.03999996F, 91.2549973F), new Vector2(-4.24300003F, 88.4049988F), new Vector2(-4.36999989F, 85.1119995F));
                    builder.AddCubicBezier(new Vector2(-4.36999989F, 82.8320007F), new Vector2(-3.92700005F, 80.9319992F), new Vector2(-3.03999996F, 79.4120026F));
                    builder.AddCubicBezier(new Vector2(-2.15300012F, 77.8919983F), new Vector2(-0.823000014F, 76.435997F), new Vector2(0.949999988F, 75.0429993F));
                    builder.AddCubicBezier(new Vector2(4.36999989F, 72.2570038F), new Vector2(7.72599983F, 69.6589966F), new Vector2(11.0190001F, 67.2529984F));
                    builder.AddCubicBezier(new Vector2(14.3120003F, 64.8470001F), new Vector2(17.6049995F, 61.9970016F), new Vector2(20.8980007F, 58.7039986F));
                    builder.AddCubicBezier(new Vector2(33.6899986F, 46.0390015F), new Vector2(43.5060005F, 31.5370007F), new Vector2(50.3450012F, 15.1990004F));
                    builder.AddCubicBezier(new Vector2(57.1839981F, -1.13900006F), new Vector2(60.6669998F, -18.3640003F), new Vector2(60.7939987F, -36.4760017F));
                    builder.AddCubicBezier(new Vector2(60.7939987F, -41.5419998F), new Vector2(59.8440018F, -46.2919998F), new Vector2(57.9440002F, -50.7249985F));
                    builder.AddCubicBezier(new Vector2(56.0439987F, -55.1580009F), new Vector2(53.4480019F, -59.0209999F), new Vector2(50.1549988F, -62.3139992F));
                    builder.AddCubicBezier(new Vector2(46.8619995F, -65.6070023F), new Vector2(42.9990005F, -68.2030029F), new Vector2(38.5660019F, -70.1029968F));
                    builder.AddCubicBezier(new Vector2(34.1329994F, -72.0029984F), new Vector2(29.3840008F, -72.9530029F), new Vector2(24.3180008F, -72.9530029F));
                    builder.AddCubicBezier(new Vector2(19.2520008F, -72.9530029F), new Vector2(14.5019999F, -72.0029984F), new Vector2(10.0690002F, -70.1029968F));
                    builder.AddCubicBezier(new Vector2(5.63600016F, -68.2030029F), new Vector2(1.773F, -65.6070023F), new Vector2(-1.51999998F, -62.3139992F));
                    builder.AddCubicBezier(new Vector2(-4.8130002F, -59.0209999F), new Vector2(-7.40899992F, -55.1580009F), new Vector2(-9.30900002F, -50.7249985F));
                    builder.AddCubicBezier(new Vector2(-11.2089996F, -46.2919998F), new Vector2(-12.1590004F, -41.5419998F), new Vector2(-12.1590004F, -36.4760017F));
                    builder.AddCubicBezier(new Vector2(-12.1590004F, -28.1170006F), new Vector2(-13.7419996F, -20.2649994F), new Vector2(-16.9080009F, -12.9189997F));
                    builder.AddCubicBezier(new Vector2(-20.0739994F, -5.57299995F), new Vector2(-24.3810005F, 0.885999978F), new Vector2(-29.8269997F, 6.45900011F));
                    builder.AddCubicBezier(new Vector2(-35.2729988F, 12.0319996F), new Vector2(-41.7319984F, 16.4020004F), new Vector2(-49.2050018F, 19.5680008F));
                    builder.AddCubicBezier(new Vector2(-56.6780014F, 22.7339993F), new Vector2(-64.5940018F, 24.3180008F), new Vector2(-72.9530029F, 24.3180008F));
                    builder.AddCubicBezier(new Vector2(-76.2460022F, 24.3180008F), new Vector2(-79.0960007F, 23.1140003F), new Vector2(-81.5019989F, 20.7080002F));
                    builder.AddCubicBezier(new Vector2(-83.9079971F, 18.302F), new Vector2(-85.1119995F, 15.4519997F), new Vector2(-85.1119995F, 12.1590004F));
                    builder.AddCubicBezier(new Vector2(-85.1119995F, 8.86600018F), new Vector2(-83.9079971F, 6.01599979F), new Vector2(-81.5019989F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(-79.0960007F, 1.204F), new Vector2(-76.2460022F, 0F), new Vector2(-72.9530029F, 0F));
                    builder.AddCubicBezier(new Vector2(-67.887001F, 0F), new Vector2(-63.137001F, -0.949999988F), new Vector2(-58.7039986F, -2.8499999F));
                    builder.AddCubicBezier(new Vector2(-54.2709999F, -4.75F), new Vector2(-50.4080009F, -7.34600019F), new Vector2(-47.1150017F, -10.6389999F));
                    builder.AddCubicBezier(new Vector2(-43.8219986F, -13.9320002F), new Vector2(-41.2260017F, -17.7950001F), new Vector2(-39.3260002F, -22.2280006F));
                    builder.AddCubicBezier(new Vector2(-37.4259987F, -26.6609993F), new Vector2(-36.4760017F, -31.4099998F), new Vector2(-36.4760017F, -36.4760017F));
                    builder.AddCubicBezier(new Vector2(-36.4760017F, -44.8349991F), new Vector2(-34.8930016F, -52.6879997F), new Vector2(-31.7269993F, -60.0340004F));
                    builder.AddCubicBezier(new Vector2(-28.5610008F, -67.3799973F), new Vector2(-24.2539997F, -73.776001F), new Vector2(-18.8080006F, -79.2220001F));
                    builder.AddCubicBezier(new Vector2(-13.3620005F, -84.6679993F), new Vector2(-6.90299988F, -89.038002F), new Vector2(0.569999993F, -92.3310013F));
                    builder.AddCubicBezier(new Vector2(8.04300022F, -95.6240005F), new Vector2(15.9589996F, -97.2699966F), new Vector2(24.3180008F, -97.2699966F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_05()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-106.5F, 129F));
                    builder.AddCubicBezier(new Vector2(-106.5F, 129F), new Vector2(-13.5F, 129F), new Vector2(-8.5F, 31F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Path 1.PathGeometry
            CanvasGeometry Geometry_06()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-8.5F, 31F));
                    builder.AddCubicBezier(new Vector2(-8F, -75F), new Vector2(-92.5F, -104F), new Vector2(-92.5F, -104F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_07()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-25F, 153F));
                    builder.AddCubicBezier(new Vector2(18F, 124.5F), new Vector2(43F, 73F), new Vector2(39.5F, 29F));
                    builder.AddCubicBezier(new Vector2(36F, -15F), new Vector2(-5F, -16.5F), new Vector2(-5F, -16.5F));
                    builder.AddCubicBezier(new Vector2(-5F, -16.5F), new Vector2(-54F, -20F), new Vector2(-57.5F, 31.5F));
                    builder.AddCubicBezier(new Vector2(-59.5F, 81F), new Vector2(-105.5F, 80F), new Vector2(-105.5F, 80F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Path 1.PathGeometry
            CanvasGeometry Geometry_08()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-105.5F, 80F));
                    builder.AddCubicBezier(new Vector2(-105.5F, 80F), new Vector2(-209F, 71F), new Vector2(-133.5F, -103.5F));
                    builder.AddCubicBezier(new Vector2(-82.5F, -225F), new Vector2(94F, -147F), new Vector2(94F, -102F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_09()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-106F, 33F));
                    builder.AddLine(new Vector2(-105.5F, 26.5F));
                    builder.AddCubicBezier(new Vector2(-105.5F, 26.5F), new Vector2(-101.5F, -67F), new Vector2(-0.5F, -65.5F));
                    builder.AddCubicBezier(new Vector2(72.5F, -58.5F), new Vector2(85.5F, 8F), new Vector2(85.5F, 8F));
                    builder.AddCubicBezier(new Vector2(85.5F, 8F), new Vector2(105.5F, 72F), new Vector2(46.5F, 153.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_10()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(117.5F, -41F));
                    builder.AddLine(new Vector2(114.5F, -45.5F));
                    builder.AddCubicBezier(new Vector2(114.5F, -45.5F), new Vector2(84.5F, -103.5F), new Vector2(8F, -113.5F));
                    builder.AddCubicBezier(new Vector2(-79.3880005F, -120.179001F), new Vector2(-117F, -65.5F), new Vector2(-117F, -65.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_11()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-106F, -138.5F));
                    builder.AddCubicBezier(new Vector2(-106F, -138.5F), new Vector2(-20F, -192.5F), new Vector2(88.5F, -138.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Path 1.PathGeometry
            CanvasGeometry Geometry_12()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(88.5F, -138.5F));
                    builder.AddCubicBezier(new Vector2(198F, -89.5F), new Vector2(166.5F, 21F), new Vector2(137.731003F, 55.0820007F));
                    builder.AddCubicBezier(new Vector2(101F, 98F), new Vector2(48.4119987F, 118.950996F), new Vector2(11.0249996F, 119.199997F));
                    builder.AddCubicBezier(new Vector2(-109F, 120F), new Vector2(-148F, 38.5F), new Vector2(-148F, 38.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            CompositionPath Path_0()
            {
                var result = _path_0 = new CompositionPath(Geometry_05());
                return result;
            }

            CompositionPath Path_1()
            {
                var result = _path_1 = new CompositionPath(Geometry_07());
                return result;
            }

            CompositionPath Path_2()
            {
                var result = _path_2 = new CompositionPath(Geometry_09());
                return result;
            }

            CompositionPath Path_3()
            {
                var result = _path_3 = new CompositionPath(Geometry_10());
                return result;
            }

            CompositionPath Path_4()
            {
                var result = _path_4 = new CompositionPath(Geometry_11());
                return result;
            }

            // - - PreComp layer: FingerPrint - Base
            // - Opacity for layer: FingerPrint - Base
            // Layer: Layer 2
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_00()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_00()));
                return result;
            }

            // - - PreComp layer: FingerPrint - Base
            // - Opacity for layer: FingerPrint - Base
            // Layer: Layer 2
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_01()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_01()));
                return result;
            }

            // - - PreComp layer: FingerPrint - Base
            // - Opacity for layer: FingerPrint - Base
            // Layer: Layer 2
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_02()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_02()));
                return result;
            }

            // - - PreComp layer: FingerPrint - Base
            // - Opacity for layer: FingerPrint - Base
            // Layer: Layer 2
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_03()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_03()));
                return result;
            }

            // - - PreComp layer: FingerPrint - Base
            // - Opacity for layer: FingerPrint - Base
            // Layer: Layer 2
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_04()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_04()));
                return result;
            }

            // - Layer aggregator
            // Layer: PrintStroke - 1 - Fail
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_05()
            {
                var result = _c.CreatePathGeometry(Path_0());
                StartProgressBoundAnimation(result, "TrimEnd", TrimEndScalarAnimation_0_to_0(), _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_06()
            {
                var result = _c.CreatePathGeometry(_path_0);
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", TStartScalarAnimation_0_to_1_0(), _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", TEndScalarAnimation_0_to_1_0(), _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_07()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_06()));
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", TStartScalarAnimation_0_to_0p999(), _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", TEndScalarAnimation_0_to_1_1(), _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Layer: PrintStroke - 2 - Fail
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_08()
            {
                var result = _c.CreatePathGeometry(Path_1());
                StartProgressBoundAnimation(result, "TrimEnd", _trimEndScalarAnimation_0_to_0, _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_09()
            {
                var result = _c.CreatePathGeometry(_path_1);
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", _tStartScalarAnimation_0_to_1_0, _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", _tEndScalarAnimation_0_to_1_0, _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_10()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_08()));
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", TStartScalarAnimation_0_to_0p995(), _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", _tEndScalarAnimation_0_to_1_1, _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Layer: PrintStroke - 3 - Fail
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_11()
            {
                var result = _c.CreatePathGeometry(Path_2());
                StartProgressBoundAnimation(result, "TrimEnd", _trimEndScalarAnimation_0_to_0, _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_12()
            {
                var result = _c.CreatePathGeometry(_path_2);
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", TStartScalarAnimation_0_to_1_1(), _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", _tEndScalarAnimation_0_to_1_0, _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Layer: PrintStroke - 4 - Fail
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_13()
            {
                var result = _c.CreatePathGeometry(Path_3());
                StartProgressBoundAnimation(result, "TrimEnd", _trimEndScalarAnimation_0_to_0, _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_14()
            {
                var result = _c.CreatePathGeometry(_path_3);
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", _tStartScalarAnimation_0_to_1_1, _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", _tEndScalarAnimation_0_to_1_0, _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Layer: PrintStroke - 5 - Fail
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_15()
            {
                var result = _c.CreatePathGeometry(Path_4());
                StartProgressBoundAnimation(result, "TrimEnd", _trimEndScalarAnimation_0_to_0, _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_16()
            {
                var result = _c.CreatePathGeometry(_path_4);
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", _tStartScalarAnimation_0_to_1_0, _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", _tEndScalarAnimation_0_to_1_0, _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_17()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_12()));
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", TStartScalarAnimation_0_to_0p373(), _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", _tEndScalarAnimation_0_to_1_1, _rootProgress);
                return result;
            }

            // Rectangle Path 2.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_0()
            {
                var result = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(150F, 150F);
                result.Offset = new Vector2(45F, -75F);
                result.Size = new Vector2(0F, 0F);
                StartProgressBoundAnimation(result, "Size", SizeVector2Animation(), _rootProgress);
                BindProperty(result, "Offset", "Vector2(80,-40)-(my.Size/Vector2(2,2))", "my", result);
                return result;
            }

            // - PreComp layer: FingerPrint - Base
            // Opacity for layer: FingerPrint - Base
            // Path 1
            CompositionSpriteShape SpriteShape_00()
            {
                // Offset:<142.531, 280.335>
                var result = CreateSpriteShape(PathGeometry_00(), new Matrix3x2(1F, 0F, 0F, 1F, 142.531006F, 280.334991F), ColorBrush_Black());
                return result;
            }

            // - PreComp layer: FingerPrint - Base
            // Opacity for layer: FingerPrint - Base
            // Path 1
            CompositionSpriteShape SpriteShape_01()
            {
                // Offset:<191.166, 49.318>
                var result = CreateSpriteShape(PathGeometry_01(), new Matrix3x2(1F, 0F, 0F, 1F, 191.166F, 49.3180008F), _colorBrush_Black);
                return result;
            }

            // - PreComp layer: FingerPrint - Base
            // Opacity for layer: FingerPrint - Base
            // Path 1
            CompositionSpriteShape SpriteShape_02()
            {
                // Offset:<200, 122.27>
                var result = CreateSpriteShape(PathGeometry_02(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 122.269997F), _colorBrush_Black);
                return result;
            }

            // - PreComp layer: FingerPrint - Base
            // Opacity for layer: FingerPrint - Base
            // Path 1
            CompositionSpriteShape SpriteShape_03()
            {
                // Offset:<191.166, 243.859>
                var result = CreateSpriteShape(PathGeometry_03(), new Matrix3x2(1F, 0F, 0F, 1F, 191.166F, 243.858994F), _colorBrush_Black);
                return result;
            }

            // - PreComp layer: FingerPrint - Base
            // Opacity for layer: FingerPrint - Base
            // Path 1
            CompositionSpriteShape SpriteShape_04()
            {
                // Offset:<166.848, 268.176>
                var result = CreateSpriteShape(PathGeometry_04(), new Matrix3x2(1F, 0F, 0F, 1F, 166.848007F, 268.175995F), _colorBrush_Black);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_05()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_05(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 25F;
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_0(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_06()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_06(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 25F;
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_1(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_07()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_07(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                StartProgressBoundAnimation(result, "StrokeThickness", StrokeThicknessScalarAnimation_25_to_80(), _rootProgress);
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_2(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_08()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_08(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 25F;
                StartProgressBoundAnimation(result, "Scale", _shapeVisibilityAnimation_0, _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_09()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_09(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 25F;
                StartProgressBoundAnimation(result, "Scale", _shapeVisibilityAnimation_1, _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_10()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_10(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                StartProgressBoundAnimation(result, "StrokeThickness", _strokeThicknessScalarAnimation_25_to_80, _rootProgress);
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_3(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Rectangle Path 2
            CompositionSpriteShape SpriteShape_11()
            {
                // Offset:<198.85901, 144.2>, Rotation:-0.008535189539860039 degrees,
                // Scale:<1.18, 1.18>
                var result = CreateSpriteShape(RoundedRectangle_0(), new Matrix3x2(1.17999995F, 0F, 0F, 1.17999995F, 198.859009F, 144.199997F), _colorBrush_Black);
                result.Scale = new Vector2(0F, 0F);
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_4(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_12()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_11(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 25F;
                StartProgressBoundAnimation(result, "Scale", _shapeVisibilityAnimation_0, _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_13()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_12(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 25F;
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_5(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_14()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_13(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 25F;
                StartProgressBoundAnimation(result, "Scale", _shapeVisibilityAnimation_0, _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_15()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_14(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 25F;
                StartProgressBoundAnimation(result, "Scale", _shapeVisibilityAnimation_5, _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_16()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_15(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 25F;
                StartProgressBoundAnimation(result, "Scale", _shapeVisibilityAnimation_0, _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_17()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_16(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 25F;
                StartProgressBoundAnimation(result, "Scale", _shapeVisibilityAnimation_1, _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_18()
            {
                // Offset:<200, 200>
                var result = CreateSpriteShape(PathGeometry_17(), new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                StartProgressBoundAnimation(result, "StrokeThickness", StrokeThicknessScalarAnimation_25_to_51p1(), _rootProgress);
                StartProgressBoundAnimation(result, "Scale", _shapeVisibilityAnimation_2, _rootProgress);
                return result;
            }

            // PreComp layer: FingerPrint - Base
            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.Clip = InsetClip_0();
                result.Opacity = 0.349999994F;
                result.Size = new Vector2(400F, 400F);
                // Opacity for layer: FingerPrint - Base
                result.Children.InsertAtTop(ShapeVisual_0());
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation(), RootProgress());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // PreComp layer: FingerPrint - Base
                children.InsertAtTop(ContainerVisual_0());
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(1F, 0F), new Vector2(0.833000004F, 0.833000004F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.349999994F, 0F), new Vector2(0.150000006F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // PreComp layer: FingerPrint - Base
            InsetClip InsetClip_0()
            {
                var result = _c.CreateInsetClip();
                return result;
            }

            // - Layer aggregator
            // Layer: PrintStroke - 5 - Unlock
            // StrokeThickness
            ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_25_to_51p1()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 25F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.649999976F, 25F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.736666679F, 51.0999985F, _cubicBezierEasingFunction_2);
                return result;
            }

            // StrokeThickness
            ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_25_to_80()
            {
                var result = _strokeThicknessScalarAnimation_25_to_80 = CreateScalarKeyFrameAnimation(0F, 25F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.649999976F, 25F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.736666679F, 80F, CubicBezierEasingFunction_2());
                return result;
            }

            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1_0()
            {
                var result = _tEndScalarAnimation_0_to_1_0 = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.400000006F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.600000024F, 1F, _cubicBezierEasingFunction_0);
                return result;
            }

            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1_1()
            {
                var result = _tEndScalarAnimation_0_to_1_1 = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.649999976F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.736666679F, 1F, _cubicBezierEasingFunction_0);
                return result;
            }

            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_0()
            {
                var result = _trimEndScalarAnimation_0_to_0 = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.200000003F, 0.5F, CubicBezierEasingFunction_0());
                result.InsertKeyFrame(0.396666676F, 0F, CubicBezierEasingFunction_1());
                return result;
            }

            // - Path 1.PathGeometry
            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_0p373()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.666666687F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.736666679F, 0.372999996F, _cubicBezierEasingFunction_0);
                return result;
            }

            // - Path 1.PathGeometry
            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_0p995()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.666666687F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.736666679F, 0.995000005F, _cubicBezierEasingFunction_0);
                return result;
            }

            // - Path 1.PathGeometry
            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_0p999()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.666666687F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.736666679F, 0.999000013F, _cubicBezierEasingFunction_0);
                return result;
            }

            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1_0()
            {
                var result = _tStartScalarAnimation_0_to_1_0 = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.600000024F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.663333356F, 1F, _cubicBezierEasingFunction_1);
                return result;
            }

            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1_1()
            {
                var result = _tStartScalarAnimation_0_to_1_1 = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.600000024F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.649999976F, 1F, _cubicBezierEasingFunction_1);
                return result;
            }

            // PreComp layer: FingerPrint - Base
            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(400F, 400F);
                var shapes = result.Shapes;
                // Layer: Layer 2
                shapes.Add(SpriteShape_00());
                // Layer: Layer 2
                shapes.Add(SpriteShape_01());
                // Layer: Layer 2
                shapes.Add(SpriteShape_02());
                // Layer: Layer 2
                shapes.Add(SpriteShape_03());
                // Layer: Layer 2
                shapes.Add(SpriteShape_04());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(400F, 400F);
                var shapes = result.Shapes;
                // Layer: PrintStroke - 1 - Fail
                shapes.Add(SpriteShape_05());
                // Layer: PrintStroke - 1 - Success
                shapes.Add(SpriteShape_06());
                // Layer: PrintStroke - 1 - Unlock
                shapes.Add(SpriteShape_07());
                // Layer: PrintStroke - 2 - Fail
                shapes.Add(SpriteShape_08());
                // Layer: PrintStroke - 2 - Success
                shapes.Add(SpriteShape_09());
                // Layer: PrintStroke - 3 - Unlock
                shapes.Add(SpriteShape_10());
                // Layer: Pupils
                shapes.Add(SpriteShape_11());
                // Layer: PrintStroke - 3 - Fail
                shapes.Add(SpriteShape_12());
                // Layer: PrintStroke - 3 - Success
                shapes.Add(SpriteShape_13());
                // Layer: PrintStroke - 4 - Fail
                shapes.Add(SpriteShape_14());
                // Layer: PrintStroke - 4 - Success
                shapes.Add(SpriteShape_15());
                // Layer: PrintStroke - 5 - Fail
                shapes.Add(SpriteShape_16());
                // Layer: PrintStroke - 5 - Success
                shapes.Add(SpriteShape_17());
                // Layer: PrintStroke - 5 - Unlock
                shapes.Add(SpriteShape_18());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
            {
                var result = _shapeVisibilityAnimation_0 = CreateVector2KeyFrameAnimation(0.400000006F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
            {
                var result = _shapeVisibilityAnimation_1 = CreateVector2KeyFrameAnimation(0.400000006F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.663333356F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
            {
                var result = _shapeVisibilityAnimation_2 = CreateVector2KeyFrameAnimation(0.649999976F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                return result;
            }

            // - Layer aggregator
            // Layer: PrintStroke - 3 - Unlock
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_3()
            {
                var result = CreateVector2KeyFrameAnimation(0.649999976F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.763333321F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            // - Layer aggregator
            // Layer: Pupils
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_4()
            {
                var result = CreateVector2KeyFrameAnimation(0.763333321F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation ShapeVisibilityAnimation_5()
            {
                var result = _shapeVisibilityAnimation_5 = CreateVector2KeyFrameAnimation(0.400000006F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.649999976F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            // Rectangle Path 2.RectangleGeometry
            // Size
            Vector2KeyFrameAnimation SizeVector2Animation()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(70F, 70F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.763333321F, new Vector2(70F, 70F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.776666641F, new Vector2(70F, 70F), _c.CreateCubicBezierEasingFunction(new Vector2(0F, 0F), new Vector2(0.833000004F, 1F)));
                result.InsertKeyFrame(0.803333342F, new Vector2(140F, 20F), _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.823333323F, new Vector2(70F, 70F), _c.CreateCubicBezierEasingFunction(new Vector2(0F, 0F), new Vector2(0F, 1F)));
                return result;
            }

            internal AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(400F, 400F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
