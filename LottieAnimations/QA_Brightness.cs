//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           6.1.0-build.109+gebc2a6a0a3
//       
//       Command:
//           LottieGen -MinimumUapVersion 11 -Namespace WindowsInternal.ComposableShell.Experiences -Interface ILottieVisual -Language CSharp -InputFile QA_Brightness.json
//       
//       Input file:
//           QA_Brightness.json (12147 bytes created 10:10-07:00 Mar 30 2020)
//       
//       Invoked on:
//           SIM10FRESH @ 17:59-07:00 Apr 1 2020
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   123 |
// |--------------------------+-------|
// | Animators                |    32 |
// | Animated brushes         |     2 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     3 |
// | PathKeyFrameAnimations   |     8 |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     3 |
// | CompositionSpriteShapes  |     9 |
// |--------------------------+-------|
// | Brushes                  |     2 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace WindowsInternal.ComposableShell.Experiences
{
    // Name:        QA_Brightness
    // Frame rate:  30 fps
    // Frame count: 90
    // Duration:    3000.0 mS
    // ____________________________________________
    // | Theme property | Type  |  Default value  |
    // |________________|_______|_________________|
    // | Foreground     | Color | #FF000000 Black |
    // --------------------------------------------
    sealed class QA_Brightness : ILottieVisualSource
    {
        // Animation duration: 3.000 seconds.
        internal const long c_durationTicks = 30000000;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0x00, 0x00, 0x00);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        public CompositionPropertySet GetThemeProperties(Compositor compositor)
        {
            return EnsureThemeProperties(compositor);
        }

        internal static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties is null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public ILottieVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (AnimatedVisual.IsRuntimeCompatible())
            {
                return
                    new AnimatedVisual(
                        compositor,
                        _themeProperties
                        );
            }

            return null;
        }

        sealed class AnimatedVisual : ILottieVisual
        {
            const long c_durationTicks = 30000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Foreground_1;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            CompositionPath _path_3;
            CompositionPath _path_4;
            CompositionPath _path_5;
            CompositionPath _path_6;
            CompositionPath _path_7;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            ExpressionAnimation _rootProgress;
            ScalarKeyFrameAnimation _rotationAngleInDegreesScalarAnimation_0_to_90;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _scaleVector2Animation;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            void BindProperty2(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName0,
                CompositionObject referencedObject0,
                string referenceParameterName1,
                CompositionObject referencedObject1)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName0, referencedObject0);
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName1, referencedObject1);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CanvasGeometry Geometry_00()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-3.53900003F, 2.82800007F));
                    builder.AddCubicBezier(new Vector2(-3.53900003F, 2.82800007F), new Vector2(-2.82800007F, 3.53900003F), new Vector2(-2.82800007F, 3.53900003F));
                    builder.AddCubicBezier(new Vector2(-2.82800007F, 3.53900003F), new Vector2(-2.83599997F, 3.53900003F), new Vector2(-2.83599997F, 3.53900003F));
                    builder.AddCubicBezier(new Vector2(-2.83599997F, 3.53900003F), new Vector2(-3.53900003F, 2.83599997F), new Vector2(-3.53900003F, 2.83599997F));
                    builder.AddCubicBezier(new Vector2(-3.53900003F, 2.83599997F), new Vector2(-3.53900003F, 2.82800007F), new Vector2(-3.53900003F, 2.82800007F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: Strokes
            // - - - Transforms: Strokes Offset:<-7.75, -7.75>
            // - - Path 11.PathGeometry
            // - Path
            CanvasGeometry Geometry_01()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-3.53900003F, 2.82800007F));
                    builder.AddCubicBezier(new Vector2(-3.53900003F, 2.82800007F), new Vector2(-2.82800007F, 3.53900003F), new Vector2(-2.82800007F, 3.53900003F));
                    builder.AddCubicBezier(new Vector2(-2.82800007F, 3.53900003F), new Vector2(-4.95300007F, 5.65600014F), new Vector2(-4.95300007F, 5.65600014F));
                    builder.AddCubicBezier(new Vector2(-4.95300007F, 5.65600014F), new Vector2(-5.65600014F, 4.95300007F), new Vector2(-5.65600014F, 4.95300007F));
                    builder.AddCubicBezier(new Vector2(-5.65600014F, 4.95300007F), new Vector2(-3.53900003F, 2.82800007F), new Vector2(-3.53900003F, 2.82800007F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_02()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(3.53900003F, -2.82800007F));
                    builder.AddCubicBezier(new Vector2(3.53900003F, -2.82800007F), new Vector2(2.82800007F, -3.53900003F), new Vector2(2.82800007F, -3.53900003F));
                    builder.AddCubicBezier(new Vector2(2.82800007F, -3.53900003F), new Vector2(2.83599997F, -3.53900003F), new Vector2(2.83599997F, -3.53900003F));
                    builder.AddCubicBezier(new Vector2(2.83599997F, -3.53900003F), new Vector2(3.53900003F, -2.83599997F), new Vector2(3.53900003F, -2.83599997F));
                    builder.AddCubicBezier(new Vector2(3.53900003F, -2.83599997F), new Vector2(3.53900003F, -2.82800007F), new Vector2(3.53900003F, -2.82800007F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: Strokes
            // - - - Transforms: Strokes 2 Offset:<-7.75, -7.75>
            // - - Path 10.PathGeometry
            // - Path
            CanvasGeometry Geometry_03()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(3.53900003F, -2.82800007F));
                    builder.AddCubicBezier(new Vector2(3.53900003F, -2.82800007F), new Vector2(2.82800007F, -3.53900003F), new Vector2(2.82800007F, -3.53900003F));
                    builder.AddCubicBezier(new Vector2(2.82800007F, -3.53900003F), new Vector2(4.95300007F, -5.65600014F), new Vector2(4.95300007F, -5.65600014F));
                    builder.AddCubicBezier(new Vector2(4.95300007F, -5.65600014F), new Vector2(5.65600014F, -4.95300007F), new Vector2(5.65600014F, -4.95300007F));
                    builder.AddCubicBezier(new Vector2(5.65600014F, -4.95300007F), new Vector2(3.53900003F, -2.82800007F), new Vector2(3.53900003F, -2.82800007F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_04()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(3.53900003F, 2.82800007F));
                    builder.AddCubicBezier(new Vector2(3.53900003F, 2.82800007F), new Vector2(3.53900003F, 2.83599997F), new Vector2(3.53900003F, 2.83599997F));
                    builder.AddCubicBezier(new Vector2(3.53900003F, 2.83599997F), new Vector2(2.83599997F, 3.53900003F), new Vector2(2.83599997F, 3.53900003F));
                    builder.AddCubicBezier(new Vector2(2.83599997F, 3.53900003F), new Vector2(2.82800007F, 3.53900003F), new Vector2(2.82800007F, 3.53900003F));
                    builder.AddCubicBezier(new Vector2(2.82800007F, 3.53900003F), new Vector2(3.53900003F, 2.82800007F), new Vector2(3.53900003F, 2.82800007F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: Strokes
            // - - - Transforms: Strokes 3 Offset:<-7.75, -7.75>
            // - - Path 9.PathGeometry
            // - Path
            CanvasGeometry Geometry_05()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(3.53900003F, 2.82800007F));
                    builder.AddCubicBezier(new Vector2(3.53900003F, 2.82800007F), new Vector2(5.65600014F, 4.95300007F), new Vector2(5.65600014F, 4.95300007F));
                    builder.AddCubicBezier(new Vector2(5.65600014F, 4.95300007F), new Vector2(4.95300007F, 5.65600014F), new Vector2(4.95300007F, 5.65600014F));
                    builder.AddCubicBezier(new Vector2(4.95300007F, 5.65600014F), new Vector2(2.82800007F, 3.53900003F), new Vector2(2.82800007F, 3.53900003F));
                    builder.AddCubicBezier(new Vector2(2.82800007F, 3.53900003F), new Vector2(3.53900003F, 2.82800007F), new Vector2(3.53900003F, 2.82800007F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_06()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-3.53900003F, -2.82800007F));
                    builder.AddCubicBezier(new Vector2(-3.53900003F, -2.82800007F), new Vector2(-3.53900003F, -2.83599997F), new Vector2(-3.53900003F, -2.83599997F));
                    builder.AddCubicBezier(new Vector2(-3.53900003F, -2.83599997F), new Vector2(-2.83599997F, -3.53900003F), new Vector2(-2.83599997F, -3.53900003F));
                    builder.AddCubicBezier(new Vector2(-2.83599997F, -3.53900003F), new Vector2(-2.82800007F, -3.53900003F), new Vector2(-2.82800007F, -3.53900003F));
                    builder.AddCubicBezier(new Vector2(-2.82800007F, -3.53900003F), new Vector2(-3.53900003F, -2.82800007F), new Vector2(-3.53900003F, -2.82800007F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: Strokes
            // - - - Transforms: Strokes 4 Offset:<-7.75, -7.75>
            // - - Path 8.PathGeometry
            // - Path
            CanvasGeometry Geometry_07()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-3.53900003F, -2.82800007F));
                    builder.AddCubicBezier(new Vector2(-3.53900003F, -2.82800007F), new Vector2(-5.65600014F, -4.95300007F), new Vector2(-5.65600014F, -4.95300007F));
                    builder.AddCubicBezier(new Vector2(-5.65600014F, -4.95300007F), new Vector2(-4.95300007F, -5.65600014F), new Vector2(-4.95300007F, -5.65600014F));
                    builder.AddCubicBezier(new Vector2(-4.95300007F, -5.65600014F), new Vector2(-2.82800007F, -3.53900003F), new Vector2(-2.82800007F, -3.53900003F));
                    builder.AddCubicBezier(new Vector2(-2.82800007F, -3.53900003F), new Vector2(-3.53900003F, -2.82800007F), new Vector2(-3.53900003F, -2.82800007F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_08()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-4.5F, 0.5F));
                    builder.AddCubicBezier(new Vector2(-4.5F, 0.5F), new Vector2(-4.5F, 0.5F), new Vector2(-4.5F, 0.5F));
                    builder.AddCubicBezier(new Vector2(-4.5F, 0.5F), new Vector2(-4.5F, -0.5F), new Vector2(-4.5F, -0.5F));
                    builder.AddCubicBezier(new Vector2(-4.5F, -0.5F), new Vector2(-4.5F, -0.5F), new Vector2(-4.5F, -0.5F));
                    builder.AddCubicBezier(new Vector2(-4.5F, -0.5F), new Vector2(-4.5F, 0.5F), new Vector2(-4.5F, 0.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: Strokes
            // - - - Transforms: Strokes 5 Offset:<-7.75, -7.75>
            // - - Path 7.PathGeometry
            // - Path
            CanvasGeometry Geometry_09()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-4.5F, 0.5F));
                    builder.AddCubicBezier(new Vector2(-4.5F, 0.5F), new Vector2(-7.5F, 0.5F), new Vector2(-7.5F, 0.5F));
                    builder.AddCubicBezier(new Vector2(-7.5F, 0.5F), new Vector2(-7.5F, -0.5F), new Vector2(-7.5F, -0.5F));
                    builder.AddCubicBezier(new Vector2(-7.5F, -0.5F), new Vector2(-4.5F, -0.5F), new Vector2(-4.5F, -0.5F));
                    builder.AddCubicBezier(new Vector2(-4.5F, -0.5F), new Vector2(-4.5F, 0.5F), new Vector2(-4.5F, 0.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_10()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(4.5F, 0.5F));
                    builder.AddCubicBezier(new Vector2(4.5F, 0.5F), new Vector2(4.5F, 0.5F), new Vector2(4.5F, 0.5F));
                    builder.AddCubicBezier(new Vector2(4.5F, 0.5F), new Vector2(4.5F, -0.5F), new Vector2(4.5F, -0.5F));
                    builder.AddCubicBezier(new Vector2(4.5F, -0.5F), new Vector2(4.5F, -0.5F), new Vector2(4.5F, -0.5F));
                    builder.AddCubicBezier(new Vector2(4.5F, -0.5F), new Vector2(4.5F, 0.5F), new Vector2(4.5F, 0.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: Strokes
            // - - - Transforms: Strokes 6 Offset:<-7.75, -7.75>
            // - - Path 5.PathGeometry
            // - Path
            CanvasGeometry Geometry_11()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(7.5F, 0.5F));
                    builder.AddCubicBezier(new Vector2(7.5F, 0.5F), new Vector2(4.5F, 0.5F), new Vector2(4.5F, 0.5F));
                    builder.AddCubicBezier(new Vector2(4.5F, 0.5F), new Vector2(4.5F, -0.5F), new Vector2(4.5F, -0.5F));
                    builder.AddCubicBezier(new Vector2(4.5F, -0.5F), new Vector2(7.5F, -0.5F), new Vector2(7.5F, -0.5F));
                    builder.AddCubicBezier(new Vector2(7.5F, -0.5F), new Vector2(7.5F, 0.5F), new Vector2(7.5F, 0.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_12()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-0.5F, 4.5F));
                    builder.AddCubicBezier(new Vector2(-0.5F, 4.5F), new Vector2(0.5F, 4.5F), new Vector2(0.5F, 4.5F));
                    builder.AddCubicBezier(new Vector2(0.5F, 4.5F), new Vector2(0.5F, 4.5F), new Vector2(0.5F, 4.5F));
                    builder.AddCubicBezier(new Vector2(0.5F, 4.5F), new Vector2(-0.5F, 4.5F), new Vector2(-0.5F, 4.5F));
                    builder.AddCubicBezier(new Vector2(-0.5F, 4.5F), new Vector2(-0.5F, 4.5F), new Vector2(-0.5F, 4.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: Strokes
            // - - - Transforms: Strokes 7 Offset:<-7.75, -7.75>
            // - - Path 4.PathGeometry
            // - Path
            CanvasGeometry Geometry_13()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-0.5F, 4.5F));
                    builder.AddCubicBezier(new Vector2(-0.5F, 4.5F), new Vector2(0.5F, 4.5F), new Vector2(0.5F, 4.5F));
                    builder.AddCubicBezier(new Vector2(0.5F, 4.5F), new Vector2(0.5F, 7.5F), new Vector2(0.5F, 7.5F));
                    builder.AddCubicBezier(new Vector2(0.5F, 7.5F), new Vector2(-0.5F, 7.5F), new Vector2(-0.5F, 7.5F));
                    builder.AddCubicBezier(new Vector2(-0.5F, 7.5F), new Vector2(-0.5F, 4.5F), new Vector2(-0.5F, 4.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_14()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0.5F, -4.5F));
                    builder.AddCubicBezier(new Vector2(0.5F, -4.5F), new Vector2(-0.5F, -4.5F), new Vector2(-0.5F, -4.5F));
                    builder.AddCubicBezier(new Vector2(-0.5F, -4.5F), new Vector2(-0.5F, -4.5F), new Vector2(-0.5F, -4.5F));
                    builder.AddCubicBezier(new Vector2(-0.5F, -4.5F), new Vector2(0.5F, -4.5F), new Vector2(0.5F, -4.5F));
                    builder.AddCubicBezier(new Vector2(0.5F, -4.5F), new Vector2(0.5F, -4.5F), new Vector2(0.5F, -4.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: Strokes
            // - - - Transforms: Strokes 8 Offset:<-7.75, -7.75>
            // - - Path 3.PathGeometry
            // - Path
            CanvasGeometry Geometry_15()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0.5F, -4.5F));
                    builder.AddCubicBezier(new Vector2(0.5F, -4.5F), new Vector2(-0.5F, -4.5F), new Vector2(-0.5F, -4.5F));
                    builder.AddCubicBezier(new Vector2(-0.5F, -4.5F), new Vector2(-0.5F, -7.5F), new Vector2(-0.5F, -7.5F));
                    builder.AddCubicBezier(new Vector2(-0.5F, -7.5F), new Vector2(0.5F, -7.5F), new Vector2(0.5F, -7.5F));
                    builder.AddCubicBezier(new Vector2(0.5F, -7.5F), new Vector2(0.5F, -4.5F), new Vector2(0.5F, -4.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Ellipse 1 Scale:0.8622, Offset:<0.027, 0.012>
            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground_0()
            {
                var result = _c.CreateColorBrush();
                BindProperty(result, "Color", "ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground_1()
            {
                var result = _themeColor_Foreground_1 = _c.CreateColorBrush();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Opacity0", 0F);
                BindProperty2(result, "Color", "ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties, "my", propertySet);
                StartProgressBoundAnimation(propertySet, "Opacity0", Opacity0ScalarAnimation_0_to_1(), _rootProgress);
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.Offset = new Vector2(10F, 10F);
                // ShapeGroup: Ellipse 1 Scale:0.8622, Offset:<0.027, 0.012>
                result.Shapes.Add(SpriteShape_0());
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_90(), _rootProgress);
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Layer: Strokes
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                result.Shapes.Add(ContainerShape_2());
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation(), _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Layer: Strokes
            CompositionContainerShape ContainerShape_2()
            {
                var result = _c.CreateContainerShape();
                result.Offset = new Vector2(10F, 10F);
                var shapes = result.Shapes;
                // Transforms: Strokes Offset:<-7.75, -7.75>
                shapes.Add(SpriteShape_1());
                // Transforms: Strokes 2 Offset:<-7.75, -7.75>
                shapes.Add(SpriteShape_2());
                // Transforms: Strokes 3 Offset:<-7.75, -7.75>
                shapes.Add(SpriteShape_3());
                // Transforms: Strokes 4 Offset:<-7.75, -7.75>
                shapes.Add(SpriteShape_4());
                // Transforms: Strokes 5 Offset:<-7.75, -7.75>
                shapes.Add(SpriteShape_5());
                // Transforms: Strokes 6 Offset:<-7.75, -7.75>
                shapes.Add(SpriteShape_6());
                // Transforms: Strokes 7 Offset:<-7.75, -7.75>
                shapes.Add(SpriteShape_7());
                // Transforms: Strokes 8 Offset:<-7.75, -7.75>
                shapes.Add(SpriteShape_8());
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", _rotationAngleInDegreesScalarAnimation_0_to_90, _rootProgress);
                StartProgressBoundAnimation(result, "Scale", _scaleVector2Animation, _rootProgress);
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Ellipse 1 Scale:0.8622, Offset:<0.027, 0.012>
            // Ellipse Path 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_3p449()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(3.44899988F, 3.44899988F);
                return result;
            }

            CompositionPath Path_0()
            {
                var result = _path_0 = new CompositionPath(Geometry_00());
                return result;
            }

            CompositionPath Path_1()
            {
                var result = _path_1 = new CompositionPath(Geometry_02());
                return result;
            }

            CompositionPath Path_2()
            {
                var result = _path_2 = new CompositionPath(Geometry_04());
                return result;
            }

            CompositionPath Path_3()
            {
                var result = _path_3 = new CompositionPath(Geometry_06());
                return result;
            }

            CompositionPath Path_4()
            {
                var result = _path_4 = new CompositionPath(Geometry_08());
                return result;
            }

            CompositionPath Path_5()
            {
                var result = _path_5 = new CompositionPath(Geometry_10());
                return result;
            }

            CompositionPath Path_6()
            {
                var result = _path_6 = new CompositionPath(Geometry_12());
                return result;
            }

            CompositionPath Path_7()
            {
                var result = _path_7 = new CompositionPath(Geometry_14());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Strokes
            // Transforms: Strokes Offset:<-7.75, -7.75>
            // Path 11.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_0(), _rootProgress);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Strokes
            // Transforms: Strokes 2 Offset:<-7.75, -7.75>
            // Path 10.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_1(), _rootProgress);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Strokes
            // Transforms: Strokes 3 Offset:<-7.75, -7.75>
            // Path 9.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_2(), _rootProgress);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Strokes
            // Transforms: Strokes 4 Offset:<-7.75, -7.75>
            // Path 8.PathGeometry
            CompositionPathGeometry PathGeometry_3()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_3(), _rootProgress);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Strokes
            // Transforms: Strokes 5 Offset:<-7.75, -7.75>
            // Path 7.PathGeometry
            CompositionPathGeometry PathGeometry_4()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_4(), _rootProgress);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Strokes
            // Transforms: Strokes 6 Offset:<-7.75, -7.75>
            // Path 5.PathGeometry
            CompositionPathGeometry PathGeometry_5()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_5(), _rootProgress);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Strokes
            // Transforms: Strokes 7 Offset:<-7.75, -7.75>
            // Path 4.PathGeometry
            CompositionPathGeometry PathGeometry_6()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_6(), _rootProgress);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Strokes
            // Transforms: Strokes 8 Offset:<-7.75, -7.75>
            // Path 3.PathGeometry
            CompositionPathGeometry PathGeometry_7()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_7(), _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Ellipse Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<0.027, 0.012>, Rotation:-0.00778525422570834 degrees,
                // Scale:<0.8622, 0.8622>
                var result = CreateSpriteShape(Ellipse_3p449(), new Matrix3x2(0.862200022F, 0F, 0F, 0.862200022F, 0.0270000007F, 0.0120000001F));
                result.StrokeBrush = ThemeColor_Foreground_0();
                StartProgressBoundAnimation(result, "StrokeThickness", StrokeThicknessScalarAnimation_1p2_to_1(), RootProgress());
                return result;
            }

            // - - Layer aggregator
            // - Layer: Strokes
            // Path 11
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = ThemeColor_Foreground_1();
                return result;
            }

            // - - Layer aggregator
            // - Layer: Strokes
            // Path 10
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = _themeColor_Foreground_1;
                return result;
            }

            // - - Layer aggregator
            // - Layer: Strokes
            // Path 9
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.FillBrush = _themeColor_Foreground_1;
                return result;
            }

            // - - Layer aggregator
            // - Layer: Strokes
            // Path 8
            CompositionSpriteShape SpriteShape_4()
            {
                var result = _c.CreateSpriteShape(PathGeometry_3());
                result.FillBrush = _themeColor_Foreground_1;
                return result;
            }

            // - - Layer aggregator
            // - Layer: Strokes
            // Path 7
            CompositionSpriteShape SpriteShape_5()
            {
                var result = _c.CreateSpriteShape(PathGeometry_4());
                result.FillBrush = _themeColor_Foreground_1;
                return result;
            }

            // - - Layer aggregator
            // - Layer: Strokes
            // Path 5
            CompositionSpriteShape SpriteShape_6()
            {
                var result = _c.CreateSpriteShape(PathGeometry_5());
                result.FillBrush = _themeColor_Foreground_1;
                return result;
            }

            // - - Layer aggregator
            // - Layer: Strokes
            // Path 4
            CompositionSpriteShape SpriteShape_7()
            {
                var result = _c.CreateSpriteShape(PathGeometry_6());
                result.FillBrush = _themeColor_Foreground_1;
                return result;
            }

            // - - Layer aggregator
            // - Layer: Strokes
            // Path 3
            CompositionSpriteShape SpriteShape_8()
            {
                var result = _c.CreateSpriteShape(PathGeometry_7());
                result.FillBrush = _themeColor_Foreground_1;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.550000012F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.449999988F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: Strokes
            // - Transforms: Strokes Offset:<-7.75, -7.75>
            // Path 11.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.055555556F, _path_0, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.98888886F, new CompositionPath(Geometry_01()), CubicBezierEasingFunction_2());
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: Strokes
            // - Transforms: Strokes 2 Offset:<-7.75, -7.75>
            // Path 10.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path_1(), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.055555556F, _path_1, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.98888886F, new CompositionPath(Geometry_03()), _cubicBezierEasingFunction_2);
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: Strokes
            // - Transforms: Strokes 3 Offset:<-7.75, -7.75>
            // Path 9.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_2()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path_2(), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.055555556F, _path_2, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.98888886F, new CompositionPath(Geometry_05()), _cubicBezierEasingFunction_2);
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: Strokes
            // - Transforms: Strokes 4 Offset:<-7.75, -7.75>
            // Path 8.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_3()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path_3(), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.055555556F, _path_3, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.98888886F, new CompositionPath(Geometry_07()), _cubicBezierEasingFunction_2);
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: Strokes
            // - Transforms: Strokes 5 Offset:<-7.75, -7.75>
            // Path 7.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_4()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path_4(), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.055555556F, _path_4, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.98888886F, new CompositionPath(Geometry_09()), _cubicBezierEasingFunction_2);
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: Strokes
            // - Transforms: Strokes 6 Offset:<-7.75, -7.75>
            // Path 5.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_5()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path_5(), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.055555556F, _path_5, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.98888886F, new CompositionPath(Geometry_11()), _cubicBezierEasingFunction_2);
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: Strokes
            // - Transforms: Strokes 7 Offset:<-7.75, -7.75>
            // Path 4.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_6()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path_6(), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.055555556F, _path_6, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.98888886F, new CompositionPath(Geometry_13()), _cubicBezierEasingFunction_2);
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: Strokes
            // - Transforms: Strokes 8 Offset:<-7.75, -7.75>
            // Path 3.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_7()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path_7(), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.055555556F, _path_7, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.98888886F, new CompositionPath(Geometry_15()), _cubicBezierEasingFunction_2);
                return result;
            }

            // Opacity0
            ScalarKeyFrameAnimation Opacity0ScalarAnimation_0_to_1()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.055555556F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.111111112F, 1F, _cubicBezierEasingFunction_0);
                return result;
            }

            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_90()
            {
                var result = _rotationAngleInDegreesScalarAnimation_0_to_90 = CreateScalarKeyFrameAnimation(0F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.98888886F, 90F, CubicBezierEasingFunction_1());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Ellipse 1 Scale:0.8622, Offset:<0.027, 0.012>
            // StrokeThickness
            ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_1p2_to_1()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 1.20000005F, HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.98888886F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(20F, 20F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_0());
                // Layer: Strokes
                shapes.Add(ContainerShape_1());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                var result = _scaleVector2Animation = CreateVector2KeyFrameAnimation(0F, new Vector2(1.5625F, 1.5625F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.98888886F, new Vector2(1.25F, 1.25F), _cubicBezierEasingFunction_1);
                return result;
            }

            // - Layer aggregator
            // Layer: Strokes
            Vector2KeyFrameAnimation ShapeVisibilityAnimation()
            {
                var result = CreateVector2KeyFrameAnimation(0.055555556F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                return result;
            }

            internal AnimatedVisual(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(20F, 20F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }
    }
}
