//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Xaml.Controls;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedIconPrototype
{
    public sealed class LoadingSuccessState : IAnimatedVisualSource
    {
        public IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            if (!IsRuntimeCompatible())
            {
                return null;
            }
            return new AnimatedVisual(compositor);
        }

        static bool IsRuntimeCompatible()
        {
            if (!Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.UI.Composition.CompositionGeometricClip"))
            {
                return false;
            }
            return true;
        }

        sealed class AnimatedVisual : IAnimatedVisual
        {
            const long c_durationTicks = 25000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_AlmostDodgerBlue_FF2F9DFF;
            CompositionColorBrush _colorBrush_AlmostLightGray_FFCCCCCC;
            CubicBezierEasingFunction _cubicBezierEasingFunction_5;
            CubicBezierEasingFunction _cubicBezierEasingFunction_6;
            StepEasingFunction _holdThenStepEasingFunction;
            ContainerVisual _root;
            ExpressionAnimation _scalarExpressionAnimation;
            Vector2KeyFrameAnimation _scaleVector2Animation;
            StepEasingFunction _stepThenHoldEasingFunction;

            CompositionColorBrush ColorBrush_AlmostDodgerBlue_FF2F9DFF()
            {
                return _colorBrush_AlmostDodgerBlue_FF2F9DFF = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x2F, 0x9D, 0xFF));
            }

            CompositionColorBrush ColorBrush_AlmostLightGray_FFCCCCCC()
            {
                return _colorBrush_AlmostLightGray_FFCCCCCC = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xCC, 0xCC, 0xCC));
            }

            // Layer (Shape): circle-blue
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(37.5F, 37.5F);
                result.Offset = new Vector2(3, 3);
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_0());
                result.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360());
                var controller = result.TryGetAnimationController("RotationAngleInDegrees");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Layer (Shape): tick
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                result.Offset = new Vector2(40.5F, 40.5F);
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_1());
                result.StartAnimation("Scale", ScaleVector2Animation());
                var controller = result.TryGetAnimationController("Scale");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Layer (Shape): dash-2
            CompositionContainerShape ContainerShape_2()
            {
                var result = _c.CreateContainerShape();
                result.Offset = new Vector2(40.5F, 40.5F);
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_2());
                result.StartAnimation("Scale", _scaleVector2Animation);
                var controller = result.TryGetAnimationController("Scale");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Layer (Shape): dash-1
            CompositionContainerShape ContainerShape_3()
            {
                var result = _c.CreateContainerShape();
                result.Offset = new Vector2(40.5F, 40.5F);
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_3());
                result.StartAnimation("Scale", _scaleVector2Animation);
                var controller = result.TryGetAnimationController("Scale");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Layer (Shape): circle-blue
            // Path 1
            // Path 1.PathGeometry
            // TrimEnd
            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0), new Vector2(0.123000003F, 1));
            }

            // Layer (Shape): circle-blue
            // RotationAngleInDegrees
            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            // Layer (Shape): tick
            // Path 1
            // Path 1.PathGeometry
            // TrimStart
            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.324000001F, 0), new Vector2(0.185000002F, 1));
            }

            // Scale
            CubicBezierEasingFunction CubicBezierEasingFunction_3()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0), new Vector2(0.575999975F, 1));
            }

            // Scale
            CubicBezierEasingFunction CubicBezierEasingFunction_4()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.423000008F, 0), new Vector2(0.666999996F, 1));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_5()
            {
                return _cubicBezierEasingFunction_5 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0), new Vector2(0.301999986F, 1));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_6()
            {
                return _cubicBezierEasingFunction_6 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0), new Vector2(0.666999996F, 1));
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0, -34.5F));
                    builder.AddCubicBezier(new Vector2(19.0540009F, -34.5F), new Vector2(34.5F, -19.0540009F), new Vector2(34.5F, 0));
                    builder.AddCubicBezier(new Vector2(34.5F, 19.0540009F), new Vector2(19.0540009F, 34.5F), new Vector2(0, 34.5F));
                    builder.AddCubicBezier(new Vector2(-19.0540009F, 34.5F), new Vector2(-34.5F, 19.0540009F), new Vector2(-34.5F, 0));
                    builder.AddCubicBezier(new Vector2(-34.5F, -19.0540009F), new Vector2(-19.0540009F, -34.5F), new Vector2(0, -34.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(14.7390003F, -10.2580004F));
                    builder.AddLine(new Vector2(-5.97599983F, 10.2580004F));
                    builder.AddLine(new Vector2(-14.7390003F, 1.49399996F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(10.3570004F, -10.2580004F));
                    builder.AddLine(new Vector2(-10.3570004F, 10.2580004F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(3.30299997F, 3.30200005F));
                    builder.AddLine(new Vector2(-3.30299997F, -3.30200005F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame  = true;
                return result;
            }

            // Layer (Shape): circle-blue
            // Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                result.StartAnimation("TrimEnd", TrimEndScalarAnimation_0_to_1());
                var controller = result.TryGetAnimationController("TrimEnd");
                controller.Pause();
                controller.StartAnimation("Progress", ScalarExpressionAnimation());
                return result;
            }

            // Layer (Shape): tick
            // Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
                result.StartAnimation("TrimStart", TrimStartScalarAnimation_1_to_0());
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
                var propertySet = result.Properties;
                propertySet.InsertScalar("TStart", 1);
                propertySet.InsertScalar("TEnd", 1);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TrimEnd", _reusableExpressionAnimation);
                result.StartAnimation("TStart", TStartScalarAnimation_1_to_0_0());
                var controller = result.TryGetAnimationController("TStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TEnd", TEndScalarAnimation_1_to_0_0());
                controller = result.TryGetAnimationController("TEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_3()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
                var propertySet = result.Properties;
                propertySet.InsertScalar("TStart", 1);
                propertySet.InsertScalar("TEnd", 1);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TrimEnd", _reusableExpressionAnimation);
                result.StartAnimation("TStart", TStartScalarAnimation_1_to_0_1());
                var controller = result.TryGetAnimationController("TStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TEnd", TEndScalarAnimation_1_to_0_1());
                controller = result.TryGetAnimationController("TEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0);
                var children = result.Children;
                children.InsertAtTop(ShapeVisual());
                return result;
            }

            // Layer (Shape): circle-blue
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_360()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.800000012F, 360, CubicBezierEasingFunction_1());
                return result;
            }

            ExpressionAnimation ScalarExpressionAnimation()
            {
                var result = _scalarExpressionAnimation = _c.CreateExpressionAnimation();
                result.SetReferenceParameter("_", _root);
                result.Expression = "_.Progress";
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                var result = _scaleVector2Animation = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(0.899999976F, 0.899999976F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.583333313F, new Vector2(0.899999976F, 0.899999976F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.866666675F, new Vector2(1.08000004F, 1.08000004F), CubicBezierEasingFunction_3());
                result.InsertKeyFrame(0.983333349F, new Vector2(1, 1), CubicBezierEasingFunction_4());
                return result;
            }

            ShapeVisual ShapeVisual()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(81, 81);
                var shapes = result.Shapes;
                // Layer (Shape): circle-blue
                shapes.Add(ContainerShape_0());
                // Layer (Shape): tick
                shapes.Add(ContainerShape_1());
                // Layer (Shape): dash-2
                shapes.Add(ContainerShape_2());
                // Layer (Shape): dash-1
                shapes.Add(ContainerShape_3());
                return result;
            }

            // Layer (Shape): circle-blue
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 37.5F, 37.5F);
                result.Geometry = PathGeometry_0();
                result.StrokeBrush = ColorBrush_AlmostDodgerBlue_FF2F9DFF();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 8;
                return result;
            }

            // Layer (Shape): tick
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, -0.333000183F, 1.79899979F);
                result.Geometry = PathGeometry_1();
                result.StrokeBrush = _colorBrush_AlmostDodgerBlue_FF2F9DFF;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 8;
                return result;
            }

            // Layer (Shape): dash-2
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 11.0699997F, 3.50199986F);
                result.Geometry = PathGeometry_2();
                result.StrokeBrush = ColorBrush_AlmostLightGray_FFCCCCCC();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 2;
                return result;
            }

            // Layer (Shape): dash-1
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, -11.0530005F, 15.3590002F);
                result.Geometry = PathGeometry_3();
                result.StrokeBrush = _colorBrush_AlmostLightGray_FFCCCCCC;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 2;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame  = true;
                return result;
            }

            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 1, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.683333337F, 1, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.833333313F, 0, CubicBezierEasingFunction_6());
                return result;
            }

            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 1, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.583333313F, 1, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.766666651F, 0, _cubicBezierEasingFunction_6);
                return result;
            }

            // Layer (Shape): circle-blue
            // Path 1
            // Path 1.PathGeometry
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.800000012F, 1, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer (Shape): tick
            // Path 1
            // Path 1.PathGeometry
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_1_to_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 1, StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.583333313F, 1, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.983333349F, 0, CubicBezierEasingFunction_2());
                return result;
            }

            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_1_to_0_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 1, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.683333337F, 1, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.833333313F, 0, CubicBezierEasingFunction_5());
                return result;
            }

            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_1_to_0_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 1, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.583333313F, 1, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.766666651F, 0, _cubicBezierEasingFunction_5);
                return result;
            }

            internal AnimatedVisual(Compositor compositor)
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            Visual IAnimatedVisual.RootVisual => _root;
            TimeSpan IAnimatedVisual.Duration => TimeSpan.FromTicks(c_durationTicks);
            Vector2 IAnimatedVisual.Size => new Vector2(81, 81);
            void IDisposable.Dispose() => _root?.Dispose();
        }
    }
}
