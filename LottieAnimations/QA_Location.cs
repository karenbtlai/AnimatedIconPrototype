//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           6.1.0-build.109+gebc2a6a0a3
//       
//       Command:
//           LottieGen -MinimumUapVersion 11 -Namespace WindowsInternal.ComposableShell.Experiences -Interface ILottieVisual -Language CSharp -InputFile QA_Location.json
//       
//       Input file:
//           QA_Location.json (9854 bytes created 10:10-07:00 Mar 30 2020)
//       
//       Invoked on:
//           SIM10FRESH @ 17:59-07:00 Apr 1 2020
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    83 |
// |--------------------------+-------|
// | Animators                |    19 |
// | Animated brushes         |     1 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     2 |
// | PathKeyFrameAnimations   |     1 |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     5 |
// | CompositionSpriteShapes  |     4 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace WindowsInternal.ComposableShell.Experiences
{
    // Name:        QA_Location
    // Frame rate:  60 fps
    // Frame count: 60
    // Duration:    1000.0 mS
    // ____________________________________________
    // | Theme property | Type  |  Default value  |
    // |________________|_______|_________________|
    // | Foreground     | Color | #FF000000 Black |
    // --------------------------------------------
    sealed class QA_Location : ILottieVisualSource
    {
        // Animation duration: 1.000 seconds.
        internal const long c_durationTicks = 10000000;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0x00, 0x00, 0x00);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        public CompositionPropertySet GetThemeProperties(Compositor compositor)
        {
            return EnsureThemeProperties(compositor);
        }

        internal static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties is null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public ILottieVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (AnimatedVisual.IsRuntimeCompatible())
            {
                return
                    new AnimatedVisual(
                        compositor,
                        _themeProperties
                        );
            }

            return null;
        }

        sealed class AnimatedVisual : ILottieVisual
        {
            const long c_durationTicks = 10000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Foreground;
            CompositionPath _path;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _offsetVector2Animation_0;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            // - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - - ShapeGroup: Group 1
            // - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - - - ShapeGroup: Group 1
            // - - Path 2+Path 1.PathGeometry
            // Path 2
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(21.2299995F, -21.2299995F));
                    builder.AddLine(new Vector2(35.3839989F, 21.2299995F));
                    builder.AddLine(new Vector2(-35.3839989F, 21.2299995F));
                    builder.AddLine(new Vector2(-21.2299995F, -21.2299995F));
                    builder.AddLine(new Vector2(21.2299995F, -21.2299995F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - - - ShapeGroup: Group 1
            // - - Path 2+Path 1.PathGeometry
            // Path 1
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-17.8390007F, -16.5119991F));
                    builder.AddLine(new Vector2(-28.823F, 16.5119991F));
                    builder.AddLine(new Vector2(28.823F, 16.5119991F));
                    builder.AddLine(new Vector2(17.8390007F, -16.5119991F));
                    builder.AddLine(new Vector2(-17.8390007F, -16.5119991F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(11.8360004F, -28.9209995F));
                    builder.AddCubicBezier(new Vector2(11.2220001F, -30.3460007F), new Vector2(10.3739996F, -31.5869999F), new Vector2(9.29300022F, -32.644001F));
                    builder.AddCubicBezier(new Vector2(8.23600006F, -33.7249985F), new Vector2(6.99499989F, -34.5730019F), new Vector2(5.57000017F, -35.1870003F));
                    builder.AddCubicBezier(new Vector2(4.14499998F, -35.8260002F), new Vector2(2.62199998F, -36.1450005F), new Vector2(1F, -36.1450005F));
                    builder.AddCubicBezier(new Vector2(-0.621999979F, -36.1450005F), new Vector2(-2.15700006F, -35.8260002F), new Vector2(-3.60700011F, -35.1870003F));
                    builder.AddCubicBezier(new Vector2(-5.03200006F, -34.5730019F), new Vector2(-6.28599977F, -33.7249985F), new Vector2(-7.3670001F, -32.644001F));
                    builder.AddCubicBezier(new Vector2(-8.42399979F, -31.5869999F), new Vector2(-9.25899982F, -30.3460007F), new Vector2(-9.87300014F, -28.9209995F));
                    builder.AddCubicBezier(new Vector2(-10.4870005F, -27.4960003F), new Vector2(-10.7950001F, -25.9729996F), new Vector2(-10.7950001F, -24.3509998F));
                    builder.AddCubicBezier(new Vector2(-10.7950001F, -22.9500008F), new Vector2(-10.5609999F, -21.6110001F), new Vector2(-10.0939999F, -20.3330002F));
                    builder.AddCubicBezier(new Vector2(-9.62699986F, -19.0550003F), new Vector2(-8.97599983F, -17.8999996F), new Vector2(-8.14099979F, -16.868F));
                    builder.AddCubicBezier(new Vector2(-7.30600023F, -15.8610001F), new Vector2(-6.30999994F, -15.0010004F), new Vector2(-5.15500021F, -14.2880001F));
                    builder.AddCubicBezier(new Vector2(-4F, -13.5749998F), new Vector2(-2.7349999F, -13.0719995F), new Vector2(-1.35899997F, -12.7770004F));
                    builder.AddCubicBezier(new Vector2(-1.35899997F, -12.7770004F), new Vector2(-1.35899997F, 19.2889996F), new Vector2(-1.35899997F, 19.2889996F));
                    builder.AddCubicBezier(new Vector2(-1.35899997F, 19.5100002F), new Vector2(-1.273F, 19.7070007F), new Vector2(-1.10099995F, 19.8789997F));
                    builder.AddCubicBezier(new Vector2(-0.903999984F, 20.0259991F), new Vector2(-0.683000028F, 20.1499996F), new Vector2(-0.437000006F, 20.2479992F));
                    builder.AddCubicBezier(new Vector2(-0.166999996F, 20.3220005F), new Vector2(0.0909999982F, 20.3829994F), new Vector2(0.337000012F, 20.4319992F));
                    builder.AddCubicBezier(new Vector2(0.606999993F, 20.4570007F), new Vector2(0.828000009F, 20.4689999F), new Vector2(1F, 20.4689999F));
                    builder.AddCubicBezier(new Vector2(1.17200005F, 20.4689999F), new Vector2(1.38100004F, 20.4570007F), new Vector2(1.62699997F, 20.4319992F));
                    builder.AddCubicBezier(new Vector2(1.89699996F, 20.3829994F), new Vector2(2.15499997F, 20.3220005F), new Vector2(2.40100002F, 20.2479992F));
                    builder.AddCubicBezier(new Vector2(2.671F, 20.1499996F), new Vector2(2.89199996F, 20.0259991F), new Vector2(3.06399989F, 19.8789997F));
                    builder.AddCubicBezier(new Vector2(3.26099992F, 19.7070007F), new Vector2(3.35899997F, 19.5100002F), new Vector2(3.35899997F, 19.2889996F));
                    builder.AddCubicBezier(new Vector2(3.35899997F, 19.2889996F), new Vector2(3.35899997F, -12.7770004F), new Vector2(3.35899997F, -12.7770004F));
                    builder.AddCubicBezier(new Vector2(4.73500013F, -13.0719995F), new Vector2(6F, -13.5749998F), new Vector2(7.15500021F, -14.2880001F));
                    builder.AddCubicBezier(new Vector2(8.31000042F, -15.0010004F), new Vector2(9.30599976F, -15.8610001F), new Vector2(10.1409998F, -16.868F));
                    builder.AddCubicBezier(new Vector2(10.9759998F, -17.8999996F), new Vector2(11.6269999F, -19.0550003F), new Vector2(12.0939999F, -20.3330002F));
                    builder.AddCubicBezier(new Vector2(12.5609999F, -21.6110001F), new Vector2(12.7950001F, -22.9500008F), new Vector2(12.7950001F, -24.3509998F));
                    builder.AddCubicBezier(new Vector2(12.7950001F, -25.9729996F), new Vector2(12.4750004F, -27.4960003F), new Vector2(11.8360004F, -28.9209995F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - - - - Transforms: Pin
            // - - - ShapeGroup: Group 1
            // - - Path 2.PathGeometry
            // - Path
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(11.8360004F, -28.9209995F));
                    builder.AddCubicBezier(new Vector2(11.2220001F, -30.3460007F), new Vector2(10.3739996F, -31.5869999F), new Vector2(9.29300022F, -32.644001F));
                    builder.AddCubicBezier(new Vector2(8.23600006F, -33.7249985F), new Vector2(6.99499989F, -34.5730019F), new Vector2(5.57000017F, -35.1870003F));
                    builder.AddCubicBezier(new Vector2(4.14499998F, -35.8260002F), new Vector2(2.62199998F, -36.1450005F), new Vector2(1F, -36.1450005F));
                    builder.AddCubicBezier(new Vector2(-0.621999979F, -36.1450005F), new Vector2(-2.15700006F, -35.8260002F), new Vector2(-3.60700011F, -35.1870003F));
                    builder.AddCubicBezier(new Vector2(-5.03200006F, -34.5730019F), new Vector2(-6.28599977F, -33.7249985F), new Vector2(-7.3670001F, -32.644001F));
                    builder.AddCubicBezier(new Vector2(-8.42399979F, -31.5869999F), new Vector2(-9.25899982F, -30.3460007F), new Vector2(-9.87300014F, -28.9209995F));
                    builder.AddCubicBezier(new Vector2(-10.4870005F, -27.4960003F), new Vector2(-10.7950001F, -25.9729996F), new Vector2(-10.7950001F, -24.3509998F));
                    builder.AddCubicBezier(new Vector2(-10.7950001F, -22.9500008F), new Vector2(-10.5609999F, -21.6110001F), new Vector2(-10.0939999F, -20.3330002F));
                    builder.AddCubicBezier(new Vector2(-9.62699986F, -19.0550003F), new Vector2(-8.97599983F, -17.8999996F), new Vector2(-8.14099979F, -16.868F));
                    builder.AddCubicBezier(new Vector2(-7.30600023F, -15.8610001F), new Vector2(-6.30999994F, -15.0010004F), new Vector2(-5.15500021F, -14.2880001F));
                    builder.AddCubicBezier(new Vector2(-4F, -13.5749998F), new Vector2(-2.7349999F, -13.0719995F), new Vector2(-1.35899997F, -12.7770004F));
                    builder.AddCubicBezier(new Vector2(-1.35899997F, -12.7770004F), new Vector2(-1.39600003F, 3.27699995F), new Vector2(-1.39600003F, 3.27699995F));
                    builder.AddCubicBezier(new Vector2(-1.39600003F, 3.49799991F), new Vector2(-1.30999994F, 3.69499993F), new Vector2(-1.13800001F, 3.8670001F));
                    builder.AddCubicBezier(new Vector2(-0.940999985F, 4.01399994F), new Vector2(-0.720000029F, 4.13800001F), new Vector2(-0.474000007F, 4.23600006F));
                    builder.AddCubicBezier(new Vector2(-0.203999996F, 4.30999994F), new Vector2(0.0540000014F, 4.37099981F), new Vector2(0.300000012F, 4.42000008F));
                    builder.AddCubicBezier(new Vector2(0.569999993F, 4.44500017F), new Vector2(0.791000009F, 4.45699978F), new Vector2(0.963F, 4.45699978F));
                    builder.AddCubicBezier(new Vector2(1.13499999F, 4.45699978F), new Vector2(1.34399998F, 4.44500017F), new Vector2(1.59000003F, 4.42000008F));
                    builder.AddCubicBezier(new Vector2(1.86000001F, 4.37099981F), new Vector2(2.11800003F, 4.30999994F), new Vector2(2.36400008F, 4.23600006F));
                    builder.AddCubicBezier(new Vector2(2.63400006F, 4.13800001F), new Vector2(2.85500002F, 4.01399994F), new Vector2(3.02699995F, 3.8670001F));
                    builder.AddCubicBezier(new Vector2(3.22399998F, 3.69499993F), new Vector2(3.32200003F, 3.49799991F), new Vector2(3.32200003F, 3.27699995F));
                    builder.AddCubicBezier(new Vector2(3.32200003F, 3.27699995F), new Vector2(3.35899997F, -12.7770004F), new Vector2(3.35899997F, -12.7770004F));
                    builder.AddCubicBezier(new Vector2(4.73500013F, -13.0719995F), new Vector2(6F, -13.5749998F), new Vector2(7.15500021F, -14.2880001F));
                    builder.AddCubicBezier(new Vector2(8.31000042F, -15.0010004F), new Vector2(9.30599976F, -15.8610001F), new Vector2(10.1409998F, -16.868F));
                    builder.AddCubicBezier(new Vector2(10.9759998F, -17.8999996F), new Vector2(11.6269999F, -19.0550003F), new Vector2(12.0939999F, -20.3330002F));
                    builder.AddCubicBezier(new Vector2(12.5609999F, -21.6110001F), new Vector2(12.7950001F, -22.9500008F), new Vector2(12.7950001F, -24.3509998F));
                    builder.AddCubicBezier(new Vector2(12.7950001F, -25.9729996F), new Vector2(12.4750004F, -27.4960003F), new Vector2(11.8360004F, -28.9209995F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - - - Transforms: Pin
            // - - ShapeGroup: Group 1
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(7.52400017F, -21.5860004F));
                    builder.AddCubicBezier(new Vector2(7.15500021F, -20.7259998F), new Vector2(6.65199995F, -19.9769993F), new Vector2(6.01300001F, -19.3379993F));
                    builder.AddCubicBezier(new Vector2(5.37400007F, -18.6989994F), new Vector2(4.62400007F, -18.1959991F), new Vector2(3.76399994F, -17.8269997F));
                    builder.AddCubicBezier(new Vector2(2.90400004F, -17.4580002F), new Vector2(1.98300004F, -17.2740002F), new Vector2(1F, -17.2740002F));
                    builder.AddCubicBezier(new Vector2(0.0170000009F, -17.2740002F), new Vector2(-0.903999984F, -17.4580002F), new Vector2(-1.76400006F, -17.8269997F));
                    builder.AddCubicBezier(new Vector2(-2.62400007F, -18.1959991F), new Vector2(-3.37400007F, -18.6989994F), new Vector2(-4.01300001F, -19.3379993F));
                    builder.AddCubicBezier(new Vector2(-4.65199995F, -19.9769993F), new Vector2(-5.15500021F, -20.7259998F), new Vector2(-5.52400017F, -21.5860004F));
                    builder.AddCubicBezier(new Vector2(-5.89300013F, -22.4459991F), new Vector2(-6.07700014F, -23.368F), new Vector2(-6.07700014F, -24.3509998F));
                    builder.AddCubicBezier(new Vector2(-6.07700014F, -25.3339996F), new Vector2(-5.89300013F, -26.2549992F), new Vector2(-5.52400017F, -27.1149998F));
                    builder.AddCubicBezier(new Vector2(-5.15500021F, -27.9750004F), new Vector2(-4.65199995F, -28.7240009F), new Vector2(-4.01300001F, -29.3630009F));
                    builder.AddCubicBezier(new Vector2(-3.37400007F, -30.0020008F), new Vector2(-2.62400007F, -30.5049992F), new Vector2(-1.76400006F, -30.8740005F));
                    builder.AddCubicBezier(new Vector2(-0.903999984F, -31.243F), new Vector2(0.0170000009F, -31.427F), new Vector2(1F, -31.427F));
                    builder.AddCubicBezier(new Vector2(1.98300004F, -31.427F), new Vector2(2.90400004F, -31.243F), new Vector2(3.76399994F, -30.8740005F));
                    builder.AddCubicBezier(new Vector2(4.62400007F, -30.5049992F), new Vector2(5.37400007F, -30.0020008F), new Vector2(6.01300001F, -29.3630009F));
                    builder.AddCubicBezier(new Vector2(6.65199995F, -28.7240009F), new Vector2(7.15500021F, -27.9750004F), new Vector2(7.52400017F, -27.1149998F));
                    builder.AddCubicBezier(new Vector2(7.89300013F, -26.2549992F), new Vector2(8.07699966F, -25.3339996F), new Vector2(8.07699966F, -24.3509998F));
                    builder.AddCubicBezier(new Vector2(8.07699966F, -23.368F), new Vector2(7.89300013F, -22.4459991F), new Vector2(7.52400017F, -21.5860004F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground()
            {
                var result = _themeColor_Foreground = _c.CreateColorBrush();
                BindProperty(result, "Color", "ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // Layer: Location
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                result.Shapes.Add(ContainerShape_1());
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation(), _rootProgress);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // Layer: Location
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                result.Scale = new Vector2(1.04999995F, 1.04999995F);
                // Transforms: Location
                result.Shapes.Add(ContainerShape_2());
                StartProgressBoundAnimation(result, "Offset", _offsetVector2Animation_0, _rootProgress);
                return result;
            }

            // - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - Layer: Location
            // Transforms for Location
            CompositionContainerShape ContainerShape_2()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0.643000007F, 20.9239998F);
                result.Offset = new Vector2(-1.03100002F, -20.059F);
                // ShapeGroup: Ellipse 1 Offset:<0.643, 20.924>
                result.Shapes.Add(SpriteShape_1());
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation(), _rootProgress);
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - New - Location
            CompositionContainerShape ContainerShape_3()
            {
                var result = _c.CreateContainerShape();
                result.Scale = new Vector2(1.04999995F, 1.04999995F);
                // Transforms: Pin
                result.Shapes.Add(ContainerShape_4());
                StartProgressBoundAnimation(result, "Offset", _offsetVector2Animation_0, _rootProgress);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // Transforms for Pin
            CompositionContainerShape ContainerShape_4()
            {
                var result = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_2());
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_3());
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_1(), _rootProgress);
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - - - Layer: Location
            // - Transforms: Location
            // ShapeGroup: Ellipse 1 Offset:<0.643, 20.924>
            // Ellipse Path 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_19p138x8p051()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(19.1380005F, 8.05099964F);
                return result;
            }

            CompositionPath Path()
            {
                var result = _path = new CompositionPath(Geometry_3());
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // ShapeGroup: Group 1
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                return result;
            }

            // - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - Transforms: Pin
            // ShapeGroup: Group 1
            // Path 2.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_0(), _rootProgress);
                return result;
            }

            // - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - Transforms: Pin
            // ShapeGroup: Group 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_5()));
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.Scale = new Vector2(1.04999995F, 1.04999995F);
                result.FillBrush = ThemeColor_Foreground();
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_0(), RootProgress());
                return result;
            }

            // - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - - Layer: Location
            // Transforms: Location
            // Ellipse Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<0.643, 20.924>
                var result = CreateSpriteShape(Ellipse_19p138x8p051(), new Matrix3x2(1F, 0F, 0F, 1F, 0.643000007F, 20.9239998F));
                result.StrokeBrush = _themeColor_Foreground;
                StartProgressBoundAnimation(result, "StrokeThickness", StrokeThicknessScalarAnimation_8_to_0(), _rootProgress);
                return result;
            }

            // - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // Transforms: Pin
            // Path 2
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = _themeColor_Foreground;
                return result;
            }

            // - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // Transforms: Pin
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.FillBrush = _themeColor_Foreground;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                propertySet.InsertScalar("t0", 0F);
                // PreComp layer: Asset - AnimIcon - Action Center - New - Location
                result.Children.InsertAtTop(ShapeVisual_0());
                StartProgressBoundAnimation(propertySet, "t0", t0ScalarAnimation_0_to_1(), _rootProgress);
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.850000024F, 0F), new Vector2(0.75F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.349999994F, 0F), new Vector2(0F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - - Transforms: Pin
            // - ShapeGroup: Group 1
            // Path 2.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path(), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.166666672F, _path, CubicBezierEasingFunction_2());
                result.InsertKeyFrame(0.333333343F, new CompositionPath(Geometry_4()), _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.983333349F, _path, _cubicBezierEasingFunction_1);
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - - - Layer: Location
            // - Transforms: Location
            // ShapeGroup: Ellipse 1 Offset:<0.643, 20.924>
            // StrokeThickness
            ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_8_to_0()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 8F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.266666681F, 8F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.983333349F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.75F, 0F), new Vector2(0.649999976F, 1F)));
                return result;
            }

            ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.SetReferenceParameter("_", _root);
                result.InsertKeyFrame(0.166666657F, 1F, _cubicBezierEasingFunction_2);
                result.InsertKeyFrame(0.333333373F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.98333329F, 1F, _cubicBezierEasingFunction_1);
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(100F, 100F);
                // Scale:<0.16, 0.16>
                result.TransformMatrix = new Matrix4x4(0.159999996F, 0F, 0F, 0F, 0F, 0.159999996F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 1F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_0());
                // Layer: Location
                shapes.Add(ContainerShape_0());
                shapes.Add(ContainerShape_3());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                var result = _offsetVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(51.0499992F, 69.0149994F), StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.166666672F, new Vector2(51.0499992F, 69.0149994F), HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.333333343F, new Vector2(51.0499992F, 74.0149994F), CubicBezierEasingFunction_0());
                result.InsertKeyFrame(0.983333349F, new Vector2(51.0499992F, 69.0149994F), CubicBezierEasingFunction_1());
                return result;
            }

            // - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // Transforms: Pin
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(-1F, -18.1100006F), _holdThenStepEasingFunction);
                result.SetReferenceParameter("_", _root);
                result.InsertExpressionKeyFrame(0.166666657F, "(Pow(1-_.t0,3)*Vector2(-1,-18.11))+(3*Square(1-_.t0)*_.t0*Vector2(-1,-19.697))+(3*(1-_.t0)*Square(_.t0)*Vector2(-1,-30.015))+(Pow(_.t0,3)*Vector2(-1,-27.634))", _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.166666672F, new Vector2(-1F, -27.6340008F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.333333343F, new Vector2(-1F, -3.82399988F), _cubicBezierEasingFunction_0);
                result.InsertExpressionKeyFrame(0.98333329F, "(Pow(1-_.t0,3)*Vector2(-1,-3.824))+(3*Square(1-_.t0)*_.t0*Vector2(-1,-2.237))+(3*(1-_.t0)*Square(_.t0)*Vector2(-1,-15.729))+(Pow(_.t0,3)*Vector2(-1,-18.11))", _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.983333349F, new Vector2(-1F, -18.1100006F), _stepThenHoldEasingFunction);
                return result;
            }

            // - - - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // - - Layer: Location
            // Transforms: Location
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.266666681F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.983333349F, new Vector2(1.10000002F, 1.10000002F), _c.CreateCubicBezierEasingFunction(new Vector2(0.349999994F, 0F), new Vector2(0.25F, 1F)));
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Location
            // Layer: Location
            Vector2KeyFrameAnimation ShapeVisibilityAnimation()
            {
                var result = CreateVector2KeyFrameAnimation(0.266666681F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                return result;
            }

            internal AnimatedVisual(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(16F, 16F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }
    }
}
