//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Xaml.Controls;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedIconPrototype
{
    public sealed class LoadAnimation : IAnimatedVisualSource
    {
        public IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            if (!IsRuntimeCompatible())
            {
                return null;
            }
            return new AnimatedVisual(compositor);
        }

        static bool IsRuntimeCompatible()
        {
            if (!Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.UI.Composition.CompositionGeometricClip"))
            {
                return false;
            }
            return true;
        }

        sealed class AnimatedVisual : IAnimatedVisual
        {
            const long c_durationTicks = 20000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            CubicBezierEasingFunction _cubicBezierEasingFunction_3;
            StepEasingFunction _holdThenStepEasingFunction;
            ContainerVisual _root;
            ExpressionAnimation _scalarExpressionAnimation;
            StepEasingFunction _stepThenHoldEasingFunction;

            // 椭圆路径 1
            CompositionColorBrush AnimatedColorBrush_TransparentSpringGreen_to_SpringGreen()
            {
                var result = _c.CreateColorBrush(Color.FromArgb(0x00, 0x00, 0xFF, 0x7F));
                result.StartAnimation("Color", ColorAnimation_TransparentSpringGreen_to_SpringGreen());
                var controller = result.TryGetAnimationController("Color");
                controller.Pause();
                controller.StartAnimation("Progress", ScalarExpressionAnimation());
                return result;
            }

            // 椭圆路径 1
            CompositionColorBrush AnimatedColorBrush_TransparentSpringGreen_to_TransparentSpringGreen()
            {
                var result = _c.CreateColorBrush(Color.FromArgb(0x00, 0x00, 0xFF, 0x7F));
                result.StartAnimation("Color", ColorAnimation_TransparentSpringGreen_to_TransparentSpringGreen());
                var controller = result.TryGetAnimationController("Color");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Color
            ColorKeyFrameAnimation ColorAnimation_TransparentSpringGreen_to_SpringGreen()
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
               // // result.InteroplationColorSpace = CompositionColorSpace.Rgb;
                // TransparentSpringGreen
                result.InsertKeyFrame(0, Color.FromArgb(0x00, 0x00, 0xFF, 0x7F), StepThenHoldEasingFunction());
                // TransparentSpringGreen
                result.InsertKeyFrame(0.291666657F, Color.FromArgb(0x00, 0x00, 0xFF, 0x7F), HoldThenStepEasingFunction());
                // SpringGreen
                result.InsertKeyFrame(0.458333343F, Color.FromArgb(0xFF, 0x00, 0xFF, 0x7F), CubicBezierEasingFunction_0());
                return result;
            }

            // Color
            ColorKeyFrameAnimation ColorAnimation_TransparentSpringGreen_to_TransparentSpringGreen()
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
               // // result.InteroplationColorSpace = CompositionColorSpace.Rgb;
                // TransparentSpringGreen
                result.InsertKeyFrame(0, Color.FromArgb(0x00, 0x00, 0xFF, 0x7F), _holdThenStepEasingFunction);
                // SpringGreen
                result.InsertKeyFrame(0.25F, Color.FromArgb(0xFF, 0x00, 0xFF, 0x7F), CubicBezierEasingFunction_7());
                // SpringGreen
                result.InsertKeyFrame(0.291666657F, Color.FromArgb(0xFF, 0x00, 0xFF, 0x7F), _cubicBezierEasingFunction_2);
                // TransparentSpringGreen
                result.InsertKeyFrame(0.458333343F, Color.FromArgb(0x00, 0x00, 0xFF, 0x7F), _cubicBezierEasingFunction_3);
                return result;
            }

            // 路径 1
            CompositionColorBrush ColorBrush_AlmostWhiteSmoke_FFF3F6F9()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xF3, 0xF6, 0xF9));
            }

            // Color
            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.218999997F, 0.787999988F), new Vector2(0.73299998F, 0.927999973F));
            }

            // 椭圆路径 1
            // 椭圆路径 1.EllipseGeometry
            // Radius
            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.0299999993F, 0.331F), new Vector2(0.606000006F, 0.968999982F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0, 0), new Vector2(0.833000004F, 1));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_3()
            {
                return _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0), new Vector2(0.833000004F, 1));
            }

            // 椭圆路径 1
            // 椭圆路径 1.EllipseGeometry
            // Radius
            CubicBezierEasingFunction CubicBezierEasingFunction_4()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0), new Vector2(0.666999996F, 1));
            }

            // 椭圆路径 1
            // 椭圆路径 1.EllipseGeometry
            // TrimStart
            CubicBezierEasingFunction CubicBezierEasingFunction_5()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.317999989F, 0), new Vector2(0.654999971F, 1));
            }

            // 椭圆路径 1
            // 椭圆路径 1.EllipseGeometry
            // TrimStart
            CubicBezierEasingFunction CubicBezierEasingFunction_6()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.36500001F, 0.0579999983F), new Vector2(0.754999995F, 0.569000006F));
            }

            // Color
            CubicBezierEasingFunction CubicBezierEasingFunction_7()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.209999993F, 0.675000012F), new Vector2(0.799000025F, 0.93599999F));
            }

            // 路径 1
            // 路径 1.PathGeometry
            // TrimStart
            CubicBezierEasingFunction CubicBezierEasingFunction_8()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.111000001F), new Vector2(0.88499999F, 0.441000015F));
            }

            // 椭圆路径 1
            // 椭圆路径 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_0_0()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(0, 0);
                result.StartAnimation("Radius", RadiusVector2Animation_0());
                var controller = result.TryGetAnimationController("Radius");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 椭圆路径 1
            // 椭圆路径 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_0_1()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(0, 0);
                result.StartAnimation("Radius", RadiusVector2Animation_1());
                var controller = result.TryGetAnimationController("Radius");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TrimStart", TrimStartScalarAnimation_1_to_0_0());
                controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            CanvasGeometry Geometry()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(65, 1.5F));
                    builder.AddLine(new Vector2(-14, 63));
                    builder.AddLine(new Vector2(-51.5F, 16));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame  = true;
                return result;
            }

            // 路径 1
            // 路径 1.PathGeometry
            CompositionPathGeometry PathGeometry()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry()));
                result.StartAnimation("TrimStart", TrimStartScalarAnimation_1_to_0_1());
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 椭圆路径 1
            // 椭圆路径 1.EllipseGeometry
            // Radius
            Vector2KeyFrameAnimation RadiusVector2Animation_0()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(0, 0), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.291666657F, new Vector2(0, 0), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.458333343F, new Vector2(130, 130), CubicBezierEasingFunction_1());
                result.InsertKeyFrame(0.483333319F, new Vector2(115, 115), CubicBezierEasingFunction_2());
                result.InsertKeyFrame(0.516666651F, new Vector2(120, 120), CubicBezierEasingFunction_3());
                return result;
            }

            // 椭圆路径 1
            // 椭圆路径 1.EllipseGeometry
            // Radius
            Vector2KeyFrameAnimation RadiusVector2Animation_1()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(120, 120), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.333333343F, new Vector2(120, 120), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.5F, new Vector2(0, 0), CubicBezierEasingFunction_4());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0);
                var children = result.Children;
                children.InsertAtTop(ShapeVisual());
                return result;
            }

            ExpressionAnimation ScalarExpressionAnimation()
            {
                var result = _scalarExpressionAnimation = _c.CreateExpressionAnimation();
                result.SetReferenceParameter("_", _root);
                result.Expression = "_.Progress";
                return result;
            }

            ShapeVisual ShapeVisual()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(500, 500);
                var shapes = result.Shapes;
                // 椭圆路径 1
                shapes.Add(SpriteShape_0());
                // 椭圆路径 1
                shapes.Add(SpriteShape_1());
                // 路径 1
                shapes.Add(SpriteShape_2());
                return result;
            }

            // 椭圆路径 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 250, 250);
                result.FillBrush = AnimatedColorBrush_TransparentSpringGreen_to_SpringGreen();
                result.Geometry = Ellipse_0_0();
                return result;
            }

            // 椭圆路径 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 250, 250);
                result.Geometry = Ellipse_0_1();
                result.StrokeBrush = AnimatedColorBrush_TransparentSpringGreen_to_TransparentSpringGreen();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 4;
                return result;
            }

            // 路径 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 243.25F, 217.75F);
                result.Geometry = PathGeometry();
                result.StrokeBrush = ColorBrush_AlmostWhiteSmoke_FFF3F6F9();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 10;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame  = true;
                return result;
            }

            // 椭圆路径 1
            // 椭圆路径 1.EllipseGeometry
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_1_to_0_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 1, CubicBezierEasingFunction_5());
                result.InsertKeyFrame(0.25F, 0, CubicBezierEasingFunction_6());
                return result;
            }

            // 路径 1
            // 路径 1.PathGeometry
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_1_to_0_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 1, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.483333319F, 1, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.649999976F, 0, CubicBezierEasingFunction_8());
                return result;
            }

            internal AnimatedVisual(Compositor compositor)
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            Visual IAnimatedVisual.RootVisual => _root;
            TimeSpan IAnimatedVisual.Duration => TimeSpan.FromTicks(c_durationTicks);
            Vector2 IAnimatedVisual.Size => new Vector2(500, 500);
            void IDisposable.Dispose() => _root?.Dispose();
        }
    }
}
