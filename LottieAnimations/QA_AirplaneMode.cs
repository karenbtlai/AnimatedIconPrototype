//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           6.1.0-build.109+gebc2a6a0a3
//       
//       Command:
//           LottieGen -MinimumUapVersion 11 -Namespace WindowsInternal.ComposableShell.Experiences -Interface ILottieVisual -Language CSharp -InputFile QA_AirplaneMode.json
//       
//       Input file:
//           QA_AirplaneMode.json (10549 bytes created 10:10-07:00 Mar 30 2020)
//       
//       Invoked on:
//           SIM10FRESH @ 17:59-07:00 Apr 1 2020
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   145 |
// |--------------------------+-------|
// | Animators                |    47 |
// | Animated brushes         |     1 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |    12 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     6 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Xaml.Controls;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedIconPrototype
{
    // Name:        QA_AirplaneMode
    // Frame rate:  60 fps
    // Frame count: 60
    // Duration:    1000.0 mS
    // ____________________________________________
    // | Theme property | Type  |  Default value  |
    // |________________|_______|_________________|
    // | Foreground     | Color | #FF000000 Black |
    // --------------------------------------------
    sealed class QA_AirplaneMode : ILottieVisualSource
    {
        // Animation duration: 1.000 seconds.
        internal const long c_durationTicks = 10000000;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0x00, 0x00, 0x00);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        public CompositionPropertySet GetThemeProperties(Compositor compositor)
        {
            return EnsureThemeProperties(compositor);
        }

        internal static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties is null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public ILottieVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (AnimatedVisual.IsRuntimeCompatible())
            {
                return
                    new AnimatedVisual(
                        compositor,
                        _themeProperties
                        );
            }

            return null;
        }

        sealed class AnimatedVisual : ILottieVisual
        {
            const long c_durationTicks = 10000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Foreground;
            CompositionPath _path;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            // - - - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // - - ShapeGroup: Group 1
            // - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // - - - ShapeGroup: Group 1
            // - - Path 2+Path 1.PathGeometry
            // Path 2
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(30F, -10F));
                    builder.AddCubicBezier(new Vector2(31.3540001F, -10F), new Vector2(32.6430016F, -9.7329998F), new Vector2(33.8670006F, -9.19900036F));
                    builder.AddCubicBezier(new Vector2(35.0909996F, -8.66499996F), new Vector2(36.1529999F, -7.94899988F), new Vector2(37.0509987F, -7.05100012F));
                    builder.AddCubicBezier(new Vector2(37.9490013F, -6.15299988F), new Vector2(38.6650009F, -5.09100008F), new Vector2(39.1990013F, -3.8670001F));
                    builder.AddCubicBezier(new Vector2(39.7330017F, -2.64299989F), new Vector2(40F, -1.35399997F), new Vector2(40F, 0F));
                    builder.AddCubicBezier(new Vector2(40F, 1.38F), new Vector2(39.7330017F, 2.67600012F), new Vector2(39.1990013F, 3.88700008F));
                    builder.AddCubicBezier(new Vector2(38.6650009F, 5.09800005F), new Vector2(37.9490013F, 6.15299988F), new Vector2(37.0509987F, 7.05100012F));
                    builder.AddCubicBezier(new Vector2(36.1529999F, 7.94899988F), new Vector2(35.0909996F, 8.66499996F), new Vector2(33.8670006F, 9.19900036F));
                    builder.AddCubicBezier(new Vector2(32.6430016F, 9.7329998F), new Vector2(31.3540001F, 10F), new Vector2(30F, 10F));
                    builder.AddLine(new Vector2(12.5F, 10F));
                    builder.AddLine(new Vector2(-2.5F, 40F));
                    builder.AddLine(new Vector2(-20F, 40F));
                    builder.AddLine(new Vector2(-10F, 10F));
                    builder.AddLine(new Vector2(-20F, 10F));
                    builder.AddLine(new Vector2(-22.5F, 15F));
                    builder.AddLine(new Vector2(-40F, 15F));
                    builder.AddLine(new Vector2(-35F, 0F));
                    builder.AddLine(new Vector2(-40F, -15F));
                    builder.AddLine(new Vector2(-22.5F, -15F));
                    builder.AddLine(new Vector2(-20F, -10F));
                    builder.AddLine(new Vector2(-10F, -10F));
                    builder.AddLine(new Vector2(-20F, -40F));
                    builder.AddLine(new Vector2(-2.5F, -40F));
                    builder.AddLine(new Vector2(12.5F, -10F));
                    builder.AddLine(new Vector2(30F, -10F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // - - - ShapeGroup: Group 1
            // - - Path 2+Path 1.PathGeometry
            // Path 1
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(30F, 5F));
                    builder.AddCubicBezier(new Vector2(30.7029991F, 5F), new Vector2(31.3540001F, 4.86899996F), new Vector2(31.9529991F, 4.60900021F));
                    builder.AddCubicBezier(new Vector2(32.5519981F, 4.34899998F), new Vector2(33.0789986F, 3.99099994F), new Vector2(33.5349998F, 3.53500009F));
                    builder.AddCubicBezier(new Vector2(33.9910011F, 3.079F), new Vector2(34.348999F, 2.55200005F), new Vector2(34.6090012F, 1.95299995F));
                    builder.AddCubicBezier(new Vector2(34.8689995F, 1.35399997F), new Vector2(35F, 0.703000009F), new Vector2(35F, 0F));
                    builder.AddCubicBezier(new Vector2(35F, -0.703000009F), new Vector2(34.8689995F, -1.35399997F), new Vector2(34.6090012F, -1.95299995F));
                    builder.AddCubicBezier(new Vector2(34.348999F, -2.55200005F), new Vector2(33.9910011F, -3.079F), new Vector2(33.5349998F, -3.53500009F));
                    builder.AddCubicBezier(new Vector2(33.0789986F, -3.99099994F), new Vector2(32.5519981F, -4.34899998F), new Vector2(31.9529991F, -4.60900021F));
                    builder.AddCubicBezier(new Vector2(31.3540001F, -4.86899996F), new Vector2(30.7029991F, -5F), new Vector2(30F, -5F));
                    builder.AddLine(new Vector2(9.41399956F, -5F));
                    builder.AddCubicBezier(new Vector2(6.83599997F, -10F), new Vector2(4.32299995F, -14.993F), new Vector2(1.875F, -19.9799995F));
                    builder.AddCubicBezier(new Vector2(-0.573000014F, -24.9669991F), new Vector2(-3.05999994F, -29.9740009F), new Vector2(-5.58599997F, -35F));
                    builder.AddLine(new Vector2(-13.0469999F, -35F));
                    builder.AddCubicBezier(new Vector2(-11.3800001F, -29.9740009F), new Vector2(-9.72700024F, -24.9669991F), new Vector2(-8.08600044F, -19.9799995F));
                    builder.AddCubicBezier(new Vector2(-6.44500017F, -14.993F), new Vector2(-4.76599979F, -10F), new Vector2(-3.04699993F, -5F));
                    builder.AddLine(new Vector2(-23.0860004F, -5F));
                    builder.AddLine(new Vector2(-25.5860004F, -10F));
                    builder.AddLine(new Vector2(-33.0470009F, -10F));
                    builder.AddCubicBezier(new Vector2(-32.5F, -8.33300018F), new Vector2(-31.9599991F, -6.66699982F), new Vector2(-31.4260006F, -5F));
                    builder.AddCubicBezier(new Vector2(-30.8920002F, -3.33299994F), new Vector2(-30.3260002F, -1.66700006F), new Vector2(-29.7269993F, 0F));
                    builder.AddCubicBezier(new Vector2(-30.3260002F, 1.66700006F), new Vector2(-30.8920002F, 3.33299994F), new Vector2(-31.4260006F, 5F));
                    builder.AddCubicBezier(new Vector2(-31.9599991F, 6.66699982F), new Vector2(-32.5F, 8.33300018F), new Vector2(-33.0470009F, 10F));
                    builder.AddLine(new Vector2(-25.5860004F, 10F));
                    builder.AddLine(new Vector2(-23.0860004F, 5F));
                    builder.AddLine(new Vector2(-3.04699993F, 5F));
                    builder.AddCubicBezier(new Vector2(-4.76599979F, 10F), new Vector2(-6.44500017F, 14.993F), new Vector2(-8.08600044F, 19.9799995F));
                    builder.AddCubicBezier(new Vector2(-9.72700024F, 24.9669991F), new Vector2(-11.3800001F, 29.9740009F), new Vector2(-13.0469999F, 35F));
                    builder.AddLine(new Vector2(-5.58599997F, 35F));
                    builder.AddCubicBezier(new Vector2(-3.05999994F, 29.9740009F), new Vector2(-0.573000014F, 24.9669991F), new Vector2(1.875F, 19.9799995F));
                    builder.AddCubicBezier(new Vector2(4.32299995F, 14.993F), new Vector2(6.83599997F, 10F), new Vector2(9.41399956F, 5F));
                    builder.AddLine(new Vector2(30F, 5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Path 1.PathGeometry
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(40.75F, 27F));
                    builder.AddLine(new Vector2(5.25F, 27F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Path 1.PathGeometry
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(28.25F, 27F));
                    builder.AddLine(new Vector2(5.25F, 27F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(40.75F, 27F));
                    builder.AddLine(new Vector2(30.25F, 27F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground()
            {
                var result = _themeColor_Foreground = _c.CreateColorBrush();
                BindProperty(result, "Color", "ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            CompositionPath Path()
            {
                var result = _path = new CompositionPath(Geometry_5());
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // ShapeGroup: Group 1
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", TStartScalarAnimation_0_to_1_0(), _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", TEndScalarAnimation_0_to_1_0(), _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", TStartScalarAnimation_0_to_1_1(), _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", TEndScalarAnimation_0_to_1_1(), _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_3()
            {
                var result = _c.CreatePathGeometry(Path());
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", TStartScalarAnimation_0_to_1_2(), _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", TEndScalarAnimation_0_to_1_2(), _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_4()
            {
                var result = _c.CreatePathGeometry(_path);
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", TStartScalarAnimation_0_to_1_3(), _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", TEndScalarAnimation_0_to_1_3(), _rootProgress);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_5()
            {
                var result = _c.CreatePathGeometry(_path);
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(result, "TrimStart", "Min(my.TStart,my.TEnd)", "my", result);
                BindProperty(result, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", result);
                StartProgressBoundAnimation(propertySet, "TStart", TStartScalarAnimation_0_to_1_4(), _rootProgress);
                StartProgressBoundAnimation(propertySet, "TEnd", TEndScalarAnimation_0_to_1_4(), _rootProgress);
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = ThemeColor_Foreground();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation(), RootProgress());
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation(), _rootProgress);
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<25, 62.5>
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(1F, 0F, 0F, 1F, 25F, 62.5F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _themeColor_Foreground;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 7F;
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_0(), _rootProgress);
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<-2.5, -12.5>
                var result = CreateSpriteShape(PathGeometry_2(), new Matrix3x2(1F, 0F, 0F, 1F, -2.5F, -12.5F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _themeColor_Foreground;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 7F;
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_1(), _rootProgress);
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<47.5, 40>
                var result = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(1F, 0F, 0F, 1F, 47.5F, 40F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _themeColor_Foreground;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 7F;
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_2(), _rootProgress);
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<-25, 40.5>
                var result = CreateSpriteShape(PathGeometry_4(), new Matrix3x2(1F, 0F, 0F, 1F, -25F, 40.5F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _themeColor_Foreground;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 7F;
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_3(), _rootProgress);
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<50.25, -2>
                var result = CreateSpriteShape(PathGeometry_5(), new Matrix3x2(1F, 0F, 0F, 1F, 50.25F, -2F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _themeColor_Foreground;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 7F;
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_4(), _rootProgress);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                propertySet.InsertScalar("t0", 0F);
                // PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
                result.Children.InsertAtTop(ShapeVisual_0());
                StartProgressBoundAnimation(propertySet, "t0", t0ScalarAnimation_0_to_1(), _rootProgress);
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(1F, 0F), new Vector2(0.833000004F, 0.833000004F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.550000012F, 0F), new Vector2(0.449999988F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.SetReferenceParameter("_", _root);
                result.InsertKeyFrame(0.583333254F, 1F, CubicBezierEasingFunction_2());
                result.InsertKeyFrame(0.583333313F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.98333329F, 1F, _cubicBezierEasingFunction_2);
                return result;
            }

            // - Path 1.PathGeometry
            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1_0()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.25F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.583333313F, 1F, CubicBezierEasingFunction_1());
                return result;
            }

            // - Path 1.PathGeometry
            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1_1()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.300000012F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.633333325F, 1F, _cubicBezierEasingFunction_1);
                return result;
            }

            // - Path 1.PathGeometry
            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1_2()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.349999994F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.683333337F, 1F, _cubicBezierEasingFunction_1);
                return result;
            }

            // - Path 1.PathGeometry
            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1_3()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.400000006F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.733333349F, 1F, _cubicBezierEasingFunction_1);
                return result;
            }

            // - Path 1.PathGeometry
            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1_4()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.449999988F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.783333361F, 1F, _cubicBezierEasingFunction_1);
                return result;
            }

            // - Path 1.PathGeometry
            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1_0()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.333333343F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.583333313F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // - Path 1.PathGeometry
            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1_1()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.383333325F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.633333325F, 1F, _cubicBezierEasingFunction_0);
                return result;
            }

            // - Path 1.PathGeometry
            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1_2()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.433333337F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.683333337F, 1F, _cubicBezierEasingFunction_0);
                return result;
            }

            // - Path 1.PathGeometry
            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1_3()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.483333319F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.733333349F, 1F, _cubicBezierEasingFunction_0);
                return result;
            }

            // - Path 1.PathGeometry
            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1_4()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.533333361F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.783333361F, 1F, _cubicBezierEasingFunction_0);
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(100F, 100F);
                // Offset:<-2, -2>, Scale:<0.2, 0.2>
                result.TransformMatrix = new Matrix4x4(0.200000003F, 0F, 0F, 0F, 0F, 0.200000003F, 0F, 0F, 0F, 0F, 0F, 0F, -2F, -2F, 0F, 1F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_0());
                // Layer: Shape Layer 1
                shapes.Add(SpriteShape_1());
                // Layer: Shape Layer 2
                shapes.Add(SpriteShape_2());
                // Layer: Shape Layer 3
                shapes.Add(SpriteShape_3());
                // Layer: Shape Layer 4
                shapes.Add(SpriteShape_4());
                // Layer: Shape Layer 5
                shapes.Add(SpriteShape_5());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // ShapeGroup: Group 1
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(50F, 50F), _holdThenStepEasingFunction);
                result.SetReferenceParameter("_", _root);
                result.InsertExpressionKeyFrame(0.583333254F, "(Pow(1-_.t0,3)*Vector2(50,50))+(3*Square(1-_.t0)*_.t0*Vector2(8.5,50.625))+(3*(1-_.t0)*Square(_.t0)*Vector2(58.25,49.5))+(Pow(_.t0,3)*Vector2(65,50))", StepThenHoldEasingFunction());
                result.InsertExpressionKeyFrame(0.98333329F, "(Pow(1-_.t0,3)*Vector2(65,50))+(3*Square(1-_.t0)*_.t0*Vector2(71.75,50.5))+(3*(1-_.t0)*Square(_.t0)*Vector2(52.5,50))+(Pow(_.t0,3)*Vector2(50,50))", _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.983333349F, new Vector2(50F, 50F), _stepThenHoldEasingFunction);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // ShapeGroup: Group 1
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.5F, new Vector2(0.699999988F, 0.699999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.550000012F, 0F), new Vector2(0F, 1F)));
                result.InsertKeyFrame(0.583333313F, new Vector2(0.699999988F, 0.699999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.850000024F, 0F), new Vector2(0F, 1F)));
                result.InsertKeyFrame(0.816666663F, new Vector2(1.04999995F, 1.04999995F), _c.CreateCubicBezierEasingFunction(new Vector2(0.584999979F, 0F), new Vector2(0.740999997F, 0.75F)));
                result.InsertKeyFrame(0.983333349F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.222000003F, 0F), new Vector2(0.499000013F, 1F)));
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Layer: Shape Layer 1
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
            {
                var result = CreateVector2KeyFrameAnimation(0.25F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.600000024F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Layer: Shape Layer 2
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
            {
                var result = CreateVector2KeyFrameAnimation(0.300000012F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.649999976F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Layer: Shape Layer 3
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
            {
                var result = CreateVector2KeyFrameAnimation(0.349999994F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.699999988F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Layer: Shape Layer 4
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_3()
            {
                var result = CreateVector2KeyFrameAnimation(0.400000006F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.75F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - AirplaneMode
            // Layer: Shape Layer 5
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_4()
            {
                var result = CreateVector2KeyFrameAnimation(0.449999988F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.800000012F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            internal AnimatedVisual(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(16F, 16F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
