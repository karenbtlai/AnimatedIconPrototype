//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           6.1.0-build.109+gebc2a6a0a3
//       
//       Command:
//           LottieGen -MinimumUapVersion 11 -Namespace WindowsInternal.ComposableShell.Experiences -Interface ILottieVisual -Language CSharp -InputFile QA_InputLanguage.json
//       
//       Input file:
//           QA_InputLanguage.json (10611 bytes created 10:10-07:00 Mar 30 2020)
//       
//       Invoked on:
//           SIM10FRESH @ 17:59-07:00 Apr 1 2020
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    59 |
// |--------------------------+-------|
// | Animators                |    11 |
// | Animated brushes         |     1 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     2 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |     3 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace WindowsInternal.ComposableShell.Experiences
{
    // Name:        QA_InputLanguage
    // Frame rate:  60 fps
    // Frame count: 60
    // Duration:    1000.0 mS
    // ____________________________________________
    // | Theme property | Type  |  Default value  |
    // |________________|_______|_________________|
    // | Foreground     | Color | #FF000000 Black |
    // --------------------------------------------
    sealed class QA_InputLanguage : ILottieVisualSource
    {
        // Animation duration: 1.000 seconds.
        internal const long c_durationTicks = 10000000;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0x00, 0x00, 0x00);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        public CompositionPropertySet GetThemeProperties(Compositor compositor)
        {
            return EnsureThemeProperties(compositor);
        }

        internal static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties is null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public ILottieVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (AnimatedVisual.IsRuntimeCompatible())
            {
                return
                    new AnimatedVisual(
                        compositor,
                        _themeProperties
                        );
            }

            return null;
        }

        sealed class AnimatedVisual : ILottieVisual
        {
            const long c_durationTicks = 10000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Foreground;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            CubicBezierEasingFunction _cubicBezierEasingFunction_3;
            CubicBezierEasingFunction _cubicBezierEasingFunction_4;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - - - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // - - ShapeGroup: Group 1
            // - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // - - - ShapeGroup: Group 1
            // - - Path 2+Path 1.PathGeometry
            // Path 2
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-14.8059998F, -3.37100005F));
                    builder.AddLine(new Vector2(-0.254000008F, 40.3279991F));
                    builder.AddLine(new Vector2(-6.18599987F, 40.3279991F));
                    builder.AddLine(new Vector2(-9.81299973F, 29.4029999F));
                    builder.AddLine(new Vector2(-26.2010002F, 29.4029999F));
                    builder.AddLine(new Vector2(-29.8279991F, 40.3279991F));
                    builder.AddLine(new Vector2(-35.7599983F, 40.3279991F));
                    builder.AddLine(new Vector2(-21.2080002F, -3.37100005F));
                    builder.AddLine(new Vector2(-14.8059998F, -3.37100005F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // - - - ShapeGroup: Group 1
            // - - Path 2+Path 1.PathGeometry
            // Path 1
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-11.6479998F, 23.941F));
                    builder.AddLine(new Vector2(-18.007F, 4.82200003F));
                    builder.AddLine(new Vector2(-24.3649998F, 23.941F));
                    builder.AddLine(new Vector2(-11.6479998F, 23.941F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // - - ShapeGroup: Group 2 Offset:<64.618, 23.073>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-22.809F, 8.53499985F));
                    builder.AddCubicBezier(new Vector2(-22.7810001F, 6.57200003F), new Vector2(-22.7670002F, 4.62400007F), new Vector2(-22.7670002F, 2.68899989F));
                    builder.AddCubicBezier(new Vector2(-22.7390003F, 0.754000008F), new Vector2(-22.7520008F, -1.19500005F), new Vector2(-22.809F, -3.15799999F));
                    builder.AddCubicBezier(new Vector2(-22.809F, -3.29999995F), new Vector2(-22.7810001F, -3.45600009F), new Vector2(-22.7240009F, -3.62700009F));
                    builder.AddCubicBezier(new Vector2(-22.4960003F, -3.68400002F), new Vector2(-22.3110008F, -3.71300006F), new Vector2(-22.1690006F, -3.71300006F));
                    builder.AddCubicBezier(new Vector2(-20.9740009F, -3.68499994F), new Vector2(-19.7929993F, -3.65499997F), new Vector2(-18.6270008F, -3.62700009F));
                    builder.AddCubicBezier(new Vector2(-17.4319992F, -3.59899998F), new Vector2(-16.2380009F, -3.58500004F), new Vector2(-15.0430002F, -3.58500004F));
                    builder.AddLine(new Vector2(-3.30699992F, -3.58500004F));
                    builder.AddCubicBezier(new Vector2(-3.30699992F, -4.49499989F), new Vector2(-3.32200003F, -5.43400002F), new Vector2(-3.3499999F, -6.40100002F));
                    builder.AddCubicBezier(new Vector2(-3.3499999F, -7.36800003F), new Vector2(-3.46300006F, -8.30799961F), new Vector2(-3.69099998F, -9.21800041F));
                    builder.AddCubicBezier(new Vector2(-1.72800004F, -9.21800041F), new Vector2(0.219999999F, -9.13300037F), new Vector2(2.15499997F, -8.96199989F));
                    builder.AddCubicBezier(new Vector2(2.32599998F, -8.93400002F), new Vector2(2.49600005F, -8.89099979F), new Vector2(2.66700006F, -8.83399963F));
                    builder.AddCubicBezier(new Vector2(2.86599994F, -8.77700043F), new Vector2(2.96600008F, -8.63500023F), new Vector2(2.96600008F, -8.40699959F));
                    builder.AddCubicBezier(new Vector2(2.96600008F, -8.23600006F), new Vector2(2.9230001F, -8.06599998F), new Vector2(2.83800006F, -7.89499998F));
                    builder.AddCubicBezier(new Vector2(2.75300002F, -7.72399998F), new Vector2(2.68199992F, -7.5539999F), new Vector2(2.625F, -7.3829999F));
                    builder.AddCubicBezier(new Vector2(2.56800008F, -7.24100018F), new Vector2(2.51099992F, -7.01300001F), new Vector2(2.454F, -6.69999981F));
                    builder.AddCubicBezier(new Vector2(2.42600012F, -6.41499996F), new Vector2(2.39700007F, -6.10200024F), new Vector2(2.36899996F, -5.76100016F));
                    builder.AddLine(new Vector2(2.36899996F, -4.82200003F));
                    builder.AddLine(new Vector2(2.36899996F, -4.13899994F));
                    builder.AddLine(new Vector2(2.36899996F, -3.58500004F));
                    builder.AddLine(new Vector2(15F, -3.58500004F));
                    builder.AddCubicBezier(new Vector2(16.1949997F, -3.58500004F), new Vector2(17.375F, -3.59899998F), new Vector2(18.5419998F, -3.62700009F));
                    builder.AddCubicBezier(new Vector2(19.7369995F, -3.65499997F), new Vector2(20.9319992F, -3.68499994F), new Vector2(22.1270008F, -3.71300006F));
                    builder.AddCubicBezier(new Vector2(22.3260002F, -3.71300006F), new Vector2(22.5119991F, -3.67000008F), new Vector2(22.6819992F, -3.58500004F));
                    builder.AddCubicBezier(new Vector2(22.7670002F, -3.44300008F), new Vector2(22.809F, -3.29999995F), new Vector2(22.809F, -3.15799999F));
                    builder.AddCubicBezier(new Vector2(22.7810001F, -2.67400002F), new Vector2(22.7520008F, -2.16199994F), new Vector2(22.7240009F, -1.62199998F));
                    builder.AddCubicBezier(new Vector2(22.6959991F, -1.11000001F), new Vector2(22.6819992F, -0.611999989F), new Vector2(22.6819992F, -0.128000006F));
                    builder.AddLine(new Vector2(22.6819992F, 2.34699988F));
                    builder.AddCubicBezier(new Vector2(22.6819992F, 3.37100005F), new Vector2(22.6959991F, 4.40899992F), new Vector2(22.7240009F, 5.46199989F));
                    builder.AddCubicBezier(new Vector2(22.7520008F, 6.48600006F), new Vector2(22.7810001F, 7.51100016F), new Vector2(22.809F, 8.53499985F));
                    builder.AddCubicBezier(new Vector2(22.809F, 8.61999989F), new Vector2(22.7950001F, 8.72000027F), new Vector2(22.7670002F, 8.83399963F));
                    builder.AddCubicBezier(new Vector2(22.7670002F, 8.94799995F), new Vector2(22.7390003F, 9.03299999F), new Vector2(22.6819992F, 9.09000015F));
                    builder.AddCubicBezier(new Vector2(22.4540005F, 9.14700031F), new Vector2(22.2700005F, 9.17500019F), new Vector2(22.1270008F, 9.17500019F));
                    builder.AddCubicBezier(new Vector2(21.9850006F, 9.17500019F), new Vector2(21.6580009F, 9.18999958F), new Vector2(21.1459999F, 9.21800041F));
                    builder.AddLine(new Vector2(19.5240002F, 9.21800041F));
                    builder.AddLine(new Vector2(17.9449997F, 9.21800041F));
                    builder.AddCubicBezier(new Vector2(17.4899998F, 9.18999958F), new Vector2(17.2189999F, 9.13199997F), new Vector2(17.1340008F, 9.04699993F));
                    builder.AddCubicBezier(new Vector2(17.0769997F, 8.73400021F), new Vector2(17.0340004F, 8.23600006F), new Vector2(17.0060005F, 7.55299997F));
                    builder.AddLine(new Vector2(17.0060005F, 5.33400011F));
                    builder.AddCubicBezier(new Vector2(17.0340004F, 4.53700018F), new Vector2(17.0489998F, 3.78399992F), new Vector2(17.0489998F, 3.07299995F));
                    builder.AddCubicBezier(new Vector2(17.0769997F, 2.33299994F), new Vector2(17.0909996F, 1.76400006F), new Vector2(17.0909996F, 1.36600006F));
                    builder.AddLine(new Vector2(-17.1340008F, 1.36600006F));
                    builder.AddLine(new Vector2(-17.1340008F, 2.2190001F));
                    builder.AddCubicBezier(new Vector2(-17.1060009F, 2.64599991F), new Vector2(-17.0909996F, 3.14400005F), new Vector2(-17.0909996F, 3.71300006F));
                    builder.AddLine(new Vector2(-17.0909996F, 5.46199989F));
                    builder.AddLine(new Vector2(-17.0909996F, 7.21199989F));
                    builder.AddCubicBezier(new Vector2(-17.0909996F, 7.72399998F), new Vector2(-17.1060009F, 8.16499996F), new Vector2(-17.1340008F, 8.53499985F));
                    builder.AddCubicBezier(new Vector2(-17.1620007F, 8.8760004F), new Vector2(-17.2049999F, 9.07499981F), new Vector2(-17.2619991F, 9.13199997F));
                    builder.AddCubicBezier(new Vector2(-17.4899998F, 9.18900013F), new Vector2(-17.6749992F, 9.21800041F), new Vector2(-17.8169994F, 9.21800041F));
                    builder.AddLine(new Vector2(-22.1690006F, 9.21800041F));
                    builder.AddCubicBezier(new Vector2(-22.4820004F, 9.21800041F), new Vector2(-22.6669998F, 9.17500019F), new Vector2(-22.7240009F, 9.09000015F));
                    builder.AddCubicBezier(new Vector2(-22.7810001F, 9.00500011F), new Vector2(-22.809F, 8.81900024F), new Vector2(-22.809F, 8.53499985F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // - - ShapeGroup: Group 1 Offset:<64.767, 45.711>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(23.8129997F, -3.0940001F));
                    builder.AddCubicBezier(new Vector2(23.8700008F, -2.86599994F), new Vector2(23.8980007F, -2.68099999F), new Vector2(23.8980007F, -2.53900003F));
                    builder.AddLine(new Vector2(23.8980007F, 1.55799997F));
                    builder.AddCubicBezier(new Vector2(23.8980007F, 1.67200005F), new Vector2(23.8700008F, 1.84200001F), new Vector2(23.8129997F, 2.06999993F));
                    builder.AddCubicBezier(new Vector2(23.5849991F, 2.12700009F), new Vector2(23.4009991F, 2.15499997F), new Vector2(23.2579994F, 2.15499997F));
                    builder.AddCubicBezier(new Vector2(22.1200008F, 2.12700009F), new Vector2(20.9960003F, 2.09800005F), new Vector2(19.8859997F, 2.06999993F));
                    builder.AddCubicBezier(new Vector2(18.7770004F, 2.04200006F), new Vector2(17.6529999F, 2.02699995F), new Vector2(16.5149994F, 2.02699995F));
                    builder.AddLine(new Vector2(2.81599998F, 2.02699995F));
                    builder.AddCubicBezier(new Vector2(2.78800011F, 3.73399997F), new Vector2(2.78800011F, 5.45599985F), new Vector2(2.81599998F, 7.19099998F));
                    builder.AddCubicBezier(new Vector2(2.87299991F, 8.89799976F), new Vector2(2.93000007F, 10.6049995F), new Vector2(2.98699999F, 12.3120003F));
                    builder.AddCubicBezier(new Vector2(3.0150001F, 13.0229998F), new Vector2(2.90199995F, 13.7340002F), new Vector2(2.64599991F, 14.4449997F));
                    builder.AddCubicBezier(new Vector2(2.3900001F, 15.1560001F), new Vector2(1.96300006F, 15.7250004F), new Vector2(1.36600006F, 16.1520004F));
                    builder.AddCubicBezier(new Vector2(0.967999995F, 16.4370003F), new Vector2(0.398999989F, 16.6639996F), new Vector2(-0.340999991F, 16.8349991F));
                    builder.AddCubicBezier(new Vector2(-1.05200005F, 16.9769993F), new Vector2(-1.82099998F, 17.0919991F), new Vector2(-2.64599991F, 17.177F));
                    builder.AddCubicBezier(new Vector2(-3.47099996F, 17.2339993F), new Vector2(-4.28100014F, 17.2770004F), new Vector2(-5.07800007F, 17.3050003F));
                    builder.AddLine(new Vector2(-6.91300011F, 17.3050003F));
                    builder.AddLine(new Vector2(-7.72399998F, 17.3050003F));
                    builder.AddCubicBezier(new Vector2(-8.09399986F, 17.2770004F), new Vector2(-8.35000038F, 17.1900005F), new Vector2(-8.49199963F, 17.0480003F));
                    builder.AddCubicBezier(new Vector2(-8.57699966F, 16.9629993F), new Vector2(-8.67700005F, 16.7360001F), new Vector2(-8.79100037F, 16.3659992F));
                    builder.AddCubicBezier(new Vector2(-8.90499973F, 15.9960003F), new Vector2(-8.98999977F, 15.7399998F), new Vector2(-9.04699993F, 15.5979996F));
                    builder.AddCubicBezier(new Vector2(-9.24600029F, 14.8579998F), new Vector2(-9.48799992F, 14.1750002F), new Vector2(-9.77200031F, 13.5489998F));
                    builder.AddCubicBezier(new Vector2(-10.0279999F, 12.8950005F), new Vector2(-10.3559999F, 12.2399998F), new Vector2(-10.7539997F, 11.5860004F));
                    builder.AddCubicBezier(new Vector2(-9.7869997F, 11.6999998F), new Vector2(-8.81900024F, 11.7849998F), new Vector2(-7.85200024F, 11.842F));
                    builder.AddCubicBezier(new Vector2(-6.88500023F, 11.8699999F), new Vector2(-5.91699982F, 11.8850002F), new Vector2(-4.94999981F, 11.8850002F));
                    builder.AddCubicBezier(new Vector2(-4.2670002F, 11.8850002F), new Vector2(-3.75500011F, 11.7849998F), new Vector2(-3.41400003F, 11.5860004F));
                    builder.AddCubicBezier(new Vector2(-3.04399991F, 11.3579998F), new Vector2(-2.85899997F, 10.875F), new Vector2(-2.85899997F, 10.1350002F));
                    builder.AddLine(new Vector2(-2.85899997F, 2.02699995F));
                    builder.AddLine(new Vector2(-16.4720001F, 2.02699995F));
                    builder.AddCubicBezier(new Vector2(-17.6100006F, 2.02699995F), new Vector2(-18.7479992F, 2.04200006F), new Vector2(-19.8859997F, 2.06999993F));
                    builder.AddCubicBezier(new Vector2(-21.0240002F, 2.09800005F), new Vector2(-22.1620007F, 2.12700009F), new Vector2(-23.2999992F, 2.15499997F));
                    builder.AddCubicBezier(new Vector2(-23.5279999F, 2.15499997F), new Vector2(-23.698F, 2.11199999F), new Vector2(-23.8120003F, 2.02699995F));
                    builder.AddCubicBezier(new Vector2(-23.8689995F, 1.85599995F), new Vector2(-23.8980007F, 1.70000005F), new Vector2(-23.8980007F, 1.55799997F));
                    builder.AddLine(new Vector2(-23.8980007F, -2.53900003F));
                    builder.AddLine(new Vector2(-23.8980007F, -2.83800006F));
                    builder.AddCubicBezier(new Vector2(-23.8700008F, -2.98000002F), new Vector2(-23.8269997F, -3.07999992F), new Vector2(-23.7700005F, -3.13700008F));
                    builder.AddCubicBezier(new Vector2(-23.5990009F, -3.19400001F), new Vector2(-23.4419994F, -3.22199988F), new Vector2(-23.2999992F, -3.22199988F));
                    builder.AddCubicBezier(new Vector2(-22.1620007F, -3.19400001F), new Vector2(-21.0240002F, -3.16499996F), new Vector2(-19.8859997F, -3.13700008F));
                    builder.AddCubicBezier(new Vector2(-18.7479992F, -3.10899997F), new Vector2(-17.6100006F, -3.0940001F), new Vector2(-16.4720001F, -3.0940001F));
                    builder.AddLine(new Vector2(-2.85899997F, -3.0940001F));
                    builder.AddCubicBezier(new Vector2(-2.91599989F, -3.83400011F), new Vector2(-2.95900011F, -4.57299995F), new Vector2(-2.98699999F, -5.3130002F));
                    builder.AddCubicBezier(new Vector2(-2.98699999F, -6.08099985F), new Vector2(-3.05900002F, -6.83500004F), new Vector2(-3.20099998F, -7.57499981F));
                    builder.AddCubicBezier(new Vector2(-2.57500005F, -7.51800013F), new Vector2(-1.96300006F, -7.46099997F), new Vector2(-1.36600006F, -7.40399981F));
                    builder.AddCubicBezier(new Vector2(-0.768999994F, -7.34700012F), new Vector2(-0.157000005F, -7.28999996F), new Vector2(0.469000012F, -7.2329998F));
                    builder.AddCubicBezier(new Vector2(1.46500003F, -7.94399977F), new Vector2(2.41799998F, -8.69799995F), new Vector2(3.329F, -9.49499989F));
                    builder.AddCubicBezier(new Vector2(4.23899984F, -10.2919998F), new Vector2(5.14900017F, -11.1029997F), new Vector2(6.05999994F, -11.9280005F));
                    builder.AddLine(new Vector2(-7.08400011F, -11.9280005F));
                    builder.AddCubicBezier(new Vector2(-8.27900028F, -11.9280005F), new Vector2(-9.47399998F, -11.9130001F), new Vector2(-10.6689997F, -11.8850002F));
                    builder.AddCubicBezier(new Vector2(-11.835F, -11.8570004F), new Vector2(-13.0159998F, -11.8269997F), new Vector2(-14.2110004F, -11.7989998F));
                    builder.AddCubicBezier(new Vector2(-14.4390001F, -11.7989998F), new Vector2(-14.6090002F, -11.8430004F), new Vector2(-14.7229996F, -11.9280005F));
                    builder.AddCubicBezier(new Vector2(-14.7799997F, -12.099F), new Vector2(-14.8079996F, -12.2550001F), new Vector2(-14.8079996F, -12.3970003F));
                    builder.AddLine(new Vector2(-14.8079996F, -16.4510002F));
                    builder.AddCubicBezier(new Vector2(-14.8079996F, -16.5650005F), new Vector2(-14.7799997F, -16.7350006F), new Vector2(-14.7229996F, -16.9629993F));
                    builder.AddCubicBezier(new Vector2(-14.4949999F, -17.0200005F), new Vector2(-14.3249998F, -17.0480003F), new Vector2(-14.2110004F, -17.0480003F));
                    builder.AddCubicBezier(new Vector2(-13.0159998F, -17.0200005F), new Vector2(-11.835F, -16.9909992F), new Vector2(-10.6689997F, -16.9629993F));
                    builder.AddCubicBezier(new Vector2(-9.47399998F, -16.9349995F), new Vector2(-8.27900028F, -16.9200001F), new Vector2(-7.08400011F, -16.9200001F));
                    builder.AddLine(new Vector2(8.83399963F, -16.9200001F));
                    builder.AddCubicBezier(new Vector2(9.28899956F, -16.9200001F), new Vector2(9.71500015F, -16.9769993F), new Vector2(10.1140003F, -17.0909996F));
                    builder.AddCubicBezier(new Vector2(10.5120001F, -17.2329998F), new Vector2(10.868F, -17.3050003F), new Vector2(11.1809998F, -17.3050003F));
                    builder.AddCubicBezier(new Vector2(11.408F, -17.3050003F), new Vector2(11.7349997F, -17.1329994F), new Vector2(12.1619997F, -16.7919998F));
                    builder.AddCubicBezier(new Vector2(12.5889997F, -16.4510002F), new Vector2(13.0150003F, -16.0529995F), new Vector2(13.4420004F, -15.5979996F));
                    builder.AddCubicBezier(new Vector2(13.8690004F, -15.1429996F), new Vector2(14.2390003F, -14.6730003F), new Vector2(14.552F, -14.1890001F));
                    builder.AddCubicBezier(new Vector2(14.8929996F, -13.7340002F), new Vector2(15.0640001F, -13.3929996F), new Vector2(15.0640001F, -13.165F));
                    builder.AddCubicBezier(new Vector2(15.0640001F, -12.8809996F), new Vector2(14.9639997F, -12.6529999F), new Vector2(14.7650003F, -12.4820004F));
                    builder.AddCubicBezier(new Vector2(14.5950003F, -12.3400002F), new Vector2(14.3950005F, -12.2119999F), new Vector2(14.1680002F, -12.0979996F));
                    builder.AddCubicBezier(new Vector2(13.7690001F, -11.8990002F), new Vector2(13.3859997F, -11.6429996F), new Vector2(13.0159998F, -11.3299999F));
                    builder.AddCubicBezier(new Vector2(12.6459999F, -11.0170002F), new Vector2(12.29F, -10.7189999F), new Vector2(11.9490004F, -10.434F));
                    builder.AddCubicBezier(new Vector2(10.4700003F, -9.21100044F), new Vector2(8.97599983F, -8.01500034F), new Vector2(7.46799994F, -6.84899998F));
                    builder.AddCubicBezier(new Vector2(5.98899984F, -5.71099997F), new Vector2(4.4380002F, -4.61600018F), new Vector2(2.81599998F, -3.56299996F));
                    builder.AddLine(new Vector2(2.81599998F, -3.0940001F));
                    builder.AddLine(new Vector2(16.5149994F, -3.0940001F));
                    builder.AddCubicBezier(new Vector2(17.6529999F, -3.0940001F), new Vector2(18.7770004F, -3.10899997F), new Vector2(19.8859997F, -3.13700008F));
                    builder.AddCubicBezier(new Vector2(20.9960003F, -3.16499996F), new Vector2(22.1200008F, -3.19400001F), new Vector2(23.2579994F, -3.22199988F));
                    builder.AddCubicBezier(new Vector2(23.4570007F, -3.22199988F), new Vector2(23.6420002F, -3.1789999F), new Vector2(23.8129997F, -3.0940001F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground()
            {
                var result = _themeColor_Foreground = _c.CreateColorBrush();
                BindProperty(result, "Color", "ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            CompositionContainerShape ContainerShape()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(64.7669983F, 38.4350014F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 2 Offset:<64.618, 23.073>
                shapes.Add(SpriteShape_1());
                // ShapeGroup: Group 1 Offset:<64.767, 45.711>
                shapes.Add(SpriteShape_2());
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_1(), _rootProgress);
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_1(), _rootProgress);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // ShapeGroup: Group 1
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                return result;
            }

            // - - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // ShapeGroup: Group 2 Offset:<64.618, 23.073>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
                return result;
            }

            // - - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // ShapeGroup: Group 1 Offset:<64.767, 45.711>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
                return result;
            }

            // PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.CenterPoint = new Vector2(-18.007F, 18.4780006F);
                result.FillBrush = ThemeColor_Foreground();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_0(), RootProgress());
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_0(), _rootProgress);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<64.618, 23.073>
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(1F, 0F, 0F, 1F, 64.6179962F, 23.073F), _themeColor_Foreground);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<64.767, 45.711>
                var result = CreateSpriteShape(PathGeometry_2(), new Matrix3x2(1F, 0F, 0F, 1F, 64.7669983F, 45.7109985F), _themeColor_Foreground);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                propertySet.InsertScalar("t0", 0F);
                // PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
                result.Children.InsertAtTop(ShapeVisual_0());
                StartProgressBoundAnimation(propertySet, "t0", t0ScalarAnimation_0_to_1(), _rootProgress);
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.850000024F, 0F), new Vector2(0.75F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.349999994F, 0F), new Vector2(0.833000004F, 0.833000004F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_3()
            {
                return _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.75F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_4()
            {
                return _cubicBezierEasingFunction_4 = _c.CreateCubicBezierEasingFunction(new Vector2(0.349999994F, 0F), new Vector2(0F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.SetReferenceParameter("_", _root);
                result.InsertKeyFrame(0.316666633F, 1F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.583333373F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.799999952F, 1F, _cubicBezierEasingFunction_3);
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(100F, 100F);
                // Offset:<-1, -1>, Scale:<0.18, 0.18>
                result.TransformMatrix = new Matrix4x4(0.180000007F, 0F, 0F, 0F, 0F, 0.180000007F, 0F, 0F, 0F, 0F, 0F, 0F, -1F, -1F, 0F, 1F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_0());
                shapes.Add(ContainerShape());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // ShapeGroup: Group 1
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(50F, 50F), _holdThenStepEasingFunction);
                result.SetReferenceParameter("_", _root);
                result.InsertExpressionKeyFrame(0.316666633F, "(Pow(1-_.t0,3)*Vector2(50,50))+(3*Square(1-_.t0)*_.t0*Vector2(125.569,89.209))+(3*(1-_.t0)*Square(_.t0)*Vector2(99.812,1.983))+(Pow(_.t0,3)*Vector2(99.812,1.983))", StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.316666663F, new Vector2(99.8119965F, 1.98300004F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.5F, new Vector2(99.5070038F, 6.27199984F), _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(0.583333313F, new Vector2(99.1949997F, 6.27199984F), _cubicBezierEasingFunction_2);
                result.InsertExpressionKeyFrame(0.799999952F, "(Pow(1-_.t0,3)*Vector2(99.195,6.272))+(3*Square(1-_.t0)*_.t0*Vector2(1.07,-23.509))+(3*(1-_.t0)*Square(_.t0)*Vector2(46.319,53.377))+(Pow(_.t0,3)*Vector2(46.319,53.377))", _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.800000012F, new Vector2(46.3190002F, 53.3769989F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.983333349F, new Vector2(50F, 50F), CubicBezierEasingFunction_4());
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                result.SetReferenceParameter("_", _root);
                result.InsertExpressionKeyFrame(0.316666633F, "3*Square(1-_.t0)*_.t0*Vector2(-45.892,-26.81)+(3*(1-_.t0)*Square(_.t0)*Vector2(-28.5,30.5))+(Pow(_.t0,3)*Vector2(-28.5,30.5))", _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.316666663F, new Vector2(-28.5F, 30.5F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.5F, new Vector2(-25.25F, 27F), _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(0.583333313F, new Vector2(-25.1870003F, 27F), _cubicBezierEasingFunction_2);
                result.InsertExpressionKeyFrame(0.799999952F, "(Pow(1-_.t0,3)*Vector2(-25.187,27))+(3*Square(1-_.t0)*_.t0*Vector2(32.765,50.69))+(3*(1-_.t0)*Square(_.t0)*Vector2(7.861,-7.918))+(Pow(_.t0,3)*Vector2(7.861,-7.918))", _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.800000012F, new Vector2(7.86100006F, -7.91800022F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.983333349F, new Vector2(0F, 0F), _cubicBezierEasingFunction_4);
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // ShapeGroup: Group 1
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.316666663F, new Vector2(0.649999976F, 0.649999976F), CubicBezierEasingFunction_0());
                result.InsertKeyFrame(0.5F, new Vector2(0.75F, 0.75F), CubicBezierEasingFunction_1());
                result.InsertKeyFrame(0.583333313F, new Vector2(0.75F, 0.75F), CubicBezierEasingFunction_2());
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), CubicBezierEasingFunction_3());
                return result;
            }

            // - PreComp layer: Asset - AnimIcon - Action Center - New - Input Language
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.316666663F, new Vector2(1.25F, 1.25F), _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.5F, new Vector2(1.14999998F, 1.14999998F), _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(0.583333313F, new Vector2(1.14999998F, 1.14999998F), _cubicBezierEasingFunction_2);
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), _cubicBezierEasingFunction_3);
                return result;
            }

            internal AnimatedVisual(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(16F, 16F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
